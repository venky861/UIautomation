
"use strict";
var logGenerator = require("../../helpers/logGenerator.js"),
    logger = logGenerator.getApplicationLogger(),
    dashboardPage = require('../pageObjects/dashboard.pageObject.js'),
    launchpadPage = require('../pageObjects/launchpad.pageObject.js'),
    delivery_insights = require('../pageObjects/delivery_insights.pageObject.js'),
    launchpadTestData = require('../../testData/cards/launchpadTestData.json'),
	dashboardTestData = require('../../testData/cards/dashboardTestData.json'),
	deliveryInsightTestData = require('../../testData/cards/deliveryInsightsTestData.json'),
    appUrls = require('../../testData/appUrls.json'),
    esQueriesDelivery = require('../../elasticSearchTool/esQuery_DeliveryPayload.js'),
    util = require('../../helpers/util.js'),
    tenantId = browser.params.tenantId,
    frames = require('../../testData/frames.json'),
	applicationUrl = browser.params.url,
	isEnabledESValidation = browser.params.esValidation;

describe('Delivery Insights - functionality ', function () {
    var dashboardObj, launchpadObj, deliveryInsightObj;

        beforeAll(function() {
            dashboardObj = new dashboardPage();
            launchpadObj = new launchpadPage();
            deliveryInsightObj = new delivery_insights();
            browser.driver.manage().window().maximize();
        });

        beforeEach(function() {
            launchpadObj.open();
            launchpadObj.clickOnHamburgerMenu(launchpadTestData.leftNavigationExpanded);
            launchpadObj.clickOnleftNavigationMenuBasedOnName(launchpadTestData.aIOpsIntelligentITOperationsBtn);
            launchpadObj.clickLeftNavCardBasedOnName(launchpadTestData.dashboardCard);
            dashboardObj.open();
        });

        /*Start -- Automation Summary Action Plan Page Validation*/

        it('verify Delivery Insights data card Automation Summary Action Plans table link is clickable and redirect to respective page', function() {
            expect(dashboardObj.getCardTitleDataCenterText(dashboardTestData.deliveryInsights)).toEqual(dashboardTestData.dataCenterTxt);
            dashboardObj.clickDeliveryInsightLink('Automation Summary Action Plans');
            deliveryInsightObj.open();
            expect(deliveryInsightObj.getDeliveryInsightAutoGeneratedTicketsFlowingText()).toEqual("Auto Generated Tickets flowing into Automation Engine");
		});
		
		if(isEnabledESValidation){
			it('verify Automation Summary Action Plan page - check for total count for action plan 101', async function(){
				var TotalTicketCountFromES =  await esQueriesDelivery.getTotalTicketCount(deliveryInsightTestData.eSActionPlanSearchIndex, tenantId,60,101);
				dashboardObj.clickDeliveryInsightLink('Automation Summary Action Plans');
				deliveryInsightObj.open();
				var totalTicketCountFromPage = await deliveryInsightObj.getDeliveryInsightActionPlanTotalTicketCount("Total Tickets");
				var totalTicketCountFromPageIntVal = util.stringToInteger(totalTicketCountFromPage);
				expect(totalTicketCountFromPageIntVal).toEqual(TotalTicketCountFromES);
			});
		}

        if(isEnabledESValidation){
			it('verify Automation Summary Action Plan page - check for total count for action plan 102', async function(){
				var TotalTicketCountFromES =  await esQueriesDelivery.getTotalTicketCount(deliveryInsightTestData.eSActionPlanSearchIndex, tenantId,60,102);
				dashboardObj.clickDeliveryInsightLink('Automation Summary Action Plans');
				deliveryInsightObj.open();
				var totalTicketCountFromPage = await deliveryInsightObj.getDeliveryInsightActionPlanEnhancedTablesTicketCount("Current Effective Rate (Account Level)");
				var totalTicketCountFromPageIntVal = util.stringToInteger(totalTicketCountFromPage);
				expect(totalTicketCountFromPageIntVal).toEqual(TotalTicketCountFromES);
			});
		}

        
		if(isEnabledESValidation){
			it('verify Automation Summary Action Plan page - check for total count for action plan 103', async function(){
				var TotalTicketCountFromES =  await esQueriesDelivery.getTotalTicketCount(deliveryInsightTestData.eSActionPlanSearchIndex, tenantId,60,103);
				dashboardObj.clickDeliveryInsightLink('Automation Summary Action Plans');
				deliveryInsightObj.open();
				var totalTicketCountFromPage = await deliveryInsightObj.getDeliveryInsightActionPlanEnhancedTablesTicketCount("To Be Effective Rate (Account level)");
				var totalTicketCountFromPageIntVal = util.stringToInteger(totalTicketCountFromPage);
				expect(totalTicketCountFromPageIntVal).toEqual(TotalTicketCountFromES);
			});
		}
       
       /*End -- Automation Summary Action Plan Page Validation*/

        afterAll(async function() {
            launchpadObj.clickOnLogoutAndLogin(browser.params.username, browser.params.password);
        });
    });
