/**
 * Created by : Pushpraj
 * created on : 12/02/2020
 */

"use strict";
var logGenerator = require("../../helpers/logGenerator.js"),
	logger = logGenerator.getApplicationLogger(),
	since = require('jasmine2-custom-message'),
	pervasiveInsightsPage = require('../pageObjects/pervasive_insights.pageObject.js'),
	incident_management = require('../pageObjects/incident_management.pageObject.js'),
	pervasiveInsightsTestData = require('../../testData/cards/pervasiveInsightsTestData.json'),
	incidentManagementTestData = require('../../testData/cards/incidentManagementTestData.json'),
	launchpadPage = require('../pageObjects/launchpad.pageObject.js'),
	launchpadTestData = require('../../testData/cards/launchpadTestData.json'),
	problemManagementPage = require('../pageObjects/problem_management.pageObject.js'),
	dashboardPage = require('../pageObjects/dashboard.pageObject.js'),
	dashboardTestData = require('../../testData/cards/dashboardTestData.json'),
	appUrls = require('../../testData/appUrls.json'),
	frames = require('../../testData/frames.json'),
	serviceMgmtUtil = require('../../helpers/serviceMgmtUtil.js'),
	expectedData = require("../../testData/expected_value/pervasive_insights_expected_values.json"),
	dashboardExpectedData = require("../../testData/expected_value/dashboard_expected_values.json"),
	util = require('../../helpers/util.js'),
	esQueriesPervasive=require('../../elasticSearchTool/esQuery_PervasivePayload.js'),
	tenantId = browser.params.tenantId,
	isEnabledESValidation = browser.params.esValidation;

describe('Pervasive Insights - functionality ', function() {
	var pervasiveInsightsObj, launchpadObj, problemManagementObj, dashboardObj,incidentManagementObj;
	var tabLinkList = [pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink,pervasiveInsightsTestData.topographyTabLink,pervasiveInsightsTestData.ticketDetailsTabLink];
	var globalFilterList = [pervasiveInsightsTestData.assignmentQueueFilterName,pervasiveInsightsTestData.contactTypeFilterName,pervasiveInsightsTestData.assignmentGroupFilterName,pervasiveInsightsTestData.serviceLineFilterName,pervasiveInsightsTestData.autogeneratedFilterName,pervasiveInsightsTestData.opcoFilterName];
	var dateRangeFilterList = [pervasiveInsightsTestData.createdFilterName,pervasiveInsightsTestData.resolvedFilterName];
	var pervasiveIssueAnalysisTabWidgetNameList = [pervasiveInsightsTestData.serverCountWidgetName, pervasiveInsightsTestData.mttrIncHoldWidegetName, pervasiveInsightsTestData.mttrExcHoldWidgetName, pervasiveInsightsTestData.autoTicketWidgetName, pervasiveInsightsTestData.userTicketWidgetName, pervasiveInsightsTestData.totalTicketCountWidgetName, pervasiveInsightsTestData.capacityNonCapacityWidgetName, pervasiveInsightsTestData.osNonOsDriveWidgetName, pervasiveInsightsTestData.serverRegionWidgetName, pervasiveInsightsTestData.priorityViewWidgetName, pervasiveInsightsTestData.top50ServersWidgetName, pervasiveInsightsTestData.serverFunctionWidgetName, pervasiveInsightsTestData.opcoWidgetName, pervasiveInsightsTestData.top50CategoryWidgetName, pervasiveInsightsTestData.assignmentGroupWidgetName, pervasiveInsightsTestData.monthWiseTrendWidgetName, pervasiveInsightsTestData.weekWiseTrendWidgetName, pervasiveInsightsTestData.topServersOnIssuesWidgetName, pervasiveInsightsTestData.topIssuesOnServersWidgetName, pervasiveInsightsTestData.whatTimeDayAlertTriggeredWidgetName];
	var topographyTabWidgetNameList = [pervasiveInsightsTestData.serverCountWidgetName, pervasiveInsightsTestData.mttrIncHoldWidegetName, pervasiveInsightsTestData.mttrExcHoldWidgetName, pervasiveInsightsTestData.siteIDCountWidgetName, pervasiveInsightsTestData.streetAddrCountWidgetName, pervasiveInsightsTestData.countryViewCountWidgetName, pervasiveInsightsTestData.countryViewWidgetName, pervasiveInsightsTestData.serverCityViewWidgetName, pervasiveInsightsTestData.buildingIDViewWidgetName, pervasiveInsightsTestData.streetAddrViewWidgetName, pervasiveInsightsTestData.siteIDViewWidgetName, pervasiveInsightsTestData.topCategoryViewWidgetName, pervasiveInsightsTestData.categoryViewForTop10AddrWidgetName, pervasiveInsightsTestData.capacityNonCapacityWidgetName, pervasiveInsightsTestData.osNonOsDriveWidgetName];
	var ticketDetailsColumnList = [pervasiveInsightsTestData.numberColumnName, pervasiveInsightsTestData.priorityColumnName, pervasiveInsightsTestData.hostNameColumnName, pervasiveInsightsTestData.serverFunctionColumnName, pervasiveInsightsTestData.serverCapacityColumnName, pervasiveInsightsTestData.serverDriveTypeColumnName, pervasiveInsightsTestData.shortDescColumnName];
	var pervasiveIssueAnalysis_expectedData = expectedData.pervasive_issue_analysis.default_filters.expected_values;
	var topography_expectedData = expectedData.topography.default_filters.expected_values;
	var ticketDetails_expectedData = expectedData.ticket_details;
	var pervasiveInsightsTop5AffectedServers = dashboardExpectedData.pervasive_insights.top_5_affected_servers;
	
	beforeAll(function() {
		pervasiveInsightsObj = new pervasiveInsightsPage();
		launchpadObj = new launchpadPage();
		problemManagementObj = new problemManagementPage();
		incidentManagementObj = new incident_management();
		dashboardObj = new dashboardPage();
	});

	beforeEach(function() {
		launchpadObj.open();
		pervasiveInsightsObj.open();
		expect(util.getCurrentURL()).toMatch(appUrls.pervasiveInsightPageUrl);
	});

	it("Verify navigation to Pervasive Insights landing page using Common tasks card from Launchpad page", function(){
		launchpadObj.open();
		launchpadObj.clickOnTileBasedOnHeaderAndTileName(launchpadTestData.sectionHeader_getStartedHeaderText,launchpadTestData.commonTask_PervasiveCardTitle);
		expect(util.getCurrentURL()).toMatch(appUrls.pervasiveInsightPageUrl);
		util.switchToDefault();
		util.switchToFrameById(frames.mcmpIframe);
		expect(util.getHeaderTitleText()).toEqual(pervasiveInsightsTestData.headerTitle);
		util.clickOnHeaderDashboardLink();
		expect(util.getCurrentURL()).toMatch(appUrls.dashboardPageUrl);
	});

	it("Verify navigation to Pervasive Insights landing page using View details link from Dashboard landing page", async function(){
		await launchpadObj.open();
		await launchpadObj.clickOnIntelligentItOprLink();
		await launchpadObj.clickOnDashboardTile(launchpadTestData.learnPage_aiopsDashboardTile);
		await dashboardObj.open();
		expect(await util.getCurrentURL()).toMatch(appUrls.dashboardPageUrl);
        expect(await dashboardObj.getDashboardHeaderTitleText()).toEqual(dashboardTestData.headerTitle);
		await dashboardObj.clickOnViewDetailsLinkBasedOnCard(dashboardTestData.pervasiveInsights);
		util.switchToDefault();
		util.switchToFrameById(frames.mcmpIframe);
		expect(await util.getHeaderTitleText()).toEqual(pervasiveInsightsTestData.headerTitle);
		expect(await util.getCurrentURL()).toMatch(appUrls.pervasiveInsightPageUrl);
	});

	it("Verify info tooltip and tab links", function(){
		serviceMgmtUtil.clickOnLastupdatedInfoIcon();
		expect(serviceMgmtUtil.getLastupdatedInfoIconText()).toBe(pervasiveInsightsTestData.headerInfoToolTipText);
		tabLinkList.forEach(function (tabLink) {
			expect(serviceMgmtUtil.getAllTabsLinkText()).toContain(tabLink);
		});
		// Calling again to close the toop tip panel
		serviceMgmtUtil.clickOnLastupdatedInfoIcon();
	});

	it("Verify Global filters visibility and their default value/tool tip text on Pervasive Issue analysis tab", function(){
		// Verify if Pervasive Issue Analysis tab is selected by default or not
		expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
		expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.topographyTabLink)).toBe(false);
		expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.ticketDetailsTabLink)).toBe(false);
		util.switchToFrameById(frames.cssrIFrame);
		util.waitForInvisibilityOfKibanaDataLoader();
		// Verify Global filters presence
		globalFilterList.forEach(function (globalFilter) {
			expect(serviceMgmtUtil.getAllFiltersButtonNameText()).toContain(globalFilter);
		});
		// Verify Date-range Global filters presence
		dateRangeFilterList.forEach(function (dateRangeFilter) {
			expect(serviceMgmtUtil.getAllFiltersButtonNameText()).toContain(dateRangeFilter);
		});
		// Verify default value / tool tip text for each global filter
		expect(serviceMgmtUtil.getGlobalFilterButtonToolTipText(pervasiveInsightsTestData.assignmentQueueFilterName)).toEqual(pervasiveInsightsTestData.noneSelectedTooltipText);
		expect(serviceMgmtUtil.getGlobalFilterButtonToolTipText(pervasiveInsightsTestData.contactTypeFilterName)).toEqual(pervasiveInsightsTestData.noneSelectedTooltipText);
		expect(serviceMgmtUtil.getGlobalFilterButtonToolTipText(pervasiveInsightsTestData.assignmentGroupFilterName)).toEqual(pervasiveInsightsTestData.noneSelectedTooltipText);
		expect(serviceMgmtUtil.getGlobalFilterButtonToolTipText(pervasiveInsightsTestData.opcoFilterName)).toEqual(pervasiveInsightsTestData.noneSelectedTooltipText);
		// AIOP-3652
		expect(serviceMgmtUtil.getGlobalFilterButtonToolTipText(pervasiveInsightsTestData.resolvedFilterName)).toEqual(pervasiveInsightsTestData.noneSelectedTooltipText);
		// Validate the default global filter is applied for "30 days" on Created date-range filter
		expect(serviceMgmtUtil.getDateRangeFilterDateDifference(pervasiveInsightsTestData.createdFilterName)).toEqual(pervasiveInsightsTestData.defaultCreatedFilterDateRangeDiff);
		// Validate each filter is expanded or not
		globalFilterList.forEach(function (globalFilter) {
			serviceMgmtUtil.clickOnFilterButtonBasedOnName(globalFilter);
			expect(serviceMgmtUtil.verifyFilterPanelExpanded(globalFilter)).toBe(true);
		});
		// Validate each date-range filter is expanded or not
		dateRangeFilterList.forEach(function (dateRangeFilter) {
			serviceMgmtUtil.clickOnDateRangeFilterButton(dateRangeFilter);
			expect(serviceMgmtUtil.verifyDateRangeFilterPanelExpanded(dateRangeFilter)).toBe(true);
		});
	});

	it("Verify Global filters visibility and their default value/tool tip text on Topography tab", function(){
		serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.topographyTabLink);
		// Verify if tab is selected, after clicking on it or not
		expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(false);
		expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.topographyTabLink)).toBe(true);
		expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.ticketDetailsTabLink)).toBe(false);
		util.switchToFrameById(frames.cssrIFrame);
		util.waitForInvisibilityOfKibanaDataLoader();
		// Verify Global filters presence
		globalFilterList.forEach(function (globalFilter) {
			expect(serviceMgmtUtil.getAllFiltersButtonNameText()).toContain(globalFilter);
		})
		// Verify Date-range Global filters presence
		dateRangeFilterList.forEach(function (dateRangeFilter) {
			expect(serviceMgmtUtil.getAllFiltersButtonNameText()).toContain(dateRangeFilter);
		})
		// Verify default value / tool tip text for each global filter
		expect(serviceMgmtUtil.getGlobalFilterButtonToolTipText(pervasiveInsightsTestData.assignmentQueueFilterName)).toEqual(pervasiveInsightsTestData.noneSelectedTooltipText);
		expect(serviceMgmtUtil.getGlobalFilterButtonToolTipText(pervasiveInsightsTestData.contactTypeFilterName)).toEqual(pervasiveInsightsTestData.noneSelectedTooltipText);
		expect(serviceMgmtUtil.getGlobalFilterButtonToolTipText(pervasiveInsightsTestData.assignmentGroupFilterName)).toEqual(pervasiveInsightsTestData.noneSelectedTooltipText);
		expect(serviceMgmtUtil.getGlobalFilterButtonToolTipText(pervasiveInsightsTestData.opcoFilterName)).toEqual(pervasiveInsightsTestData.noneSelectedTooltipText);
		// AIOP-3652
		expect(serviceMgmtUtil.getGlobalFilterButtonToolTipText(pervasiveInsightsTestData.resolvedFilterName)).toEqual(pervasiveInsightsTestData.noneSelectedTooltipText);
		// Validate the default global filter is applied for "30 days" on Created date-range filter
		expect(serviceMgmtUtil.getDateRangeFilterDateDifference(pervasiveInsightsTestData.createdFilterName)).toEqual(pervasiveInsightsTestData.defaultCreatedFilterDateRangeDiff);
		// Validate each filter is expanded or not
		globalFilterList.forEach(function (globalFilter) {
			serviceMgmtUtil.clickOnFilterButtonBasedOnName(globalFilter);
			expect(serviceMgmtUtil.verifyFilterPanelExpanded(globalFilter)).toBe(true);
		});
		// Validate each date-range filter is expanded or not
		dateRangeFilterList.forEach(function (dateRangeFilter) {
			serviceMgmtUtil.clickOnDateRangeFilterButton(dateRangeFilter);
			expect(serviceMgmtUtil.verifyDateRangeFilterPanelExpanded(dateRangeFilter)).toBe(true);
		});
	});

	it("Verify Global filters visibility and their default value/tool tip text on Ticket details tab", function(){
		serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.ticketDetailsTabLink);
		// Verify if tab is selected, after clicking on it or not
		expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(false);
		expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.topographyTabLink)).toBe(false);
		expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.ticketDetailsTabLink)).toBe(true);
		util.switchToFrameById(frames.cssrIFrame);
		util.waitForInvisibilityOfKibanaDataLoader();
		// Verify Global filters presence
		globalFilterList.forEach(function (globalFilter) {
			expect(serviceMgmtUtil.getAllFiltersButtonNameText()).toContain(globalFilter);
		})
		// Verify Date-range Global filters presence
		dateRangeFilterList.forEach(function (dateRangeFilter) {
			expect(serviceMgmtUtil.getAllFiltersButtonNameText()).toContain(dateRangeFilter);
		})
		// Verify default value / tool tip text for each global filter
		expect(serviceMgmtUtil.getGlobalFilterButtonToolTipText(pervasiveInsightsTestData.assignmentQueueFilterName)).toEqual(pervasiveInsightsTestData.noneSelectedTooltipText);
		expect(serviceMgmtUtil.getGlobalFilterButtonToolTipText(pervasiveInsightsTestData.contactTypeFilterName)).toEqual(pervasiveInsightsTestData.noneSelectedTooltipText);
		expect(serviceMgmtUtil.getGlobalFilterButtonToolTipText(pervasiveInsightsTestData.assignmentGroupFilterName)).toEqual(pervasiveInsightsTestData.noneSelectedTooltipText);
		expect(serviceMgmtUtil.getGlobalFilterButtonToolTipText(pervasiveInsightsTestData.opcoFilterName)).toEqual(pervasiveInsightsTestData.noneSelectedTooltipText);
		// AIOP-3652
		expect(serviceMgmtUtil.getGlobalFilterButtonToolTipText(pervasiveInsightsTestData.resolvedFilterName)).toEqual(pervasiveInsightsTestData.noneSelectedTooltipText);
		// Validate the default global filter is applied for "30 days" on Created date-range filter
		expect(serviceMgmtUtil.getDateRangeFilterDateDifference(pervasiveInsightsTestData.createdFilterName)).toEqual(pervasiveInsightsTestData.defaultCreatedFilterDateRangeDiff);
		// Validate each filter is expanded or not
		globalFilterList.forEach(function (globalFilter) {
			serviceMgmtUtil.clickOnFilterButtonBasedOnName(globalFilter);
			expect(serviceMgmtUtil.verifyFilterPanelExpanded(globalFilter)).toBe(true);
		});
		// Validate each date-range filter is expanded or not
		dateRangeFilterList.forEach(function (dateRangeFilter) {
			serviceMgmtUtil.clickOnDateRangeFilterButton(dateRangeFilter);
			expect(serviceMgmtUtil.verifyDateRangeFilterPanelExpanded(dateRangeFilter)).toBe(true);
		});
	});

	it("Verify Global date-range label text on Pervasive Issue Analysis, Topography and Ticket Details tab", async function(){
		serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink);
		// Verify if tab is selected, after clicking on it or not
		expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
		util.switchToFrameById(frames.cssrIFrame);
		await util.waitForInvisibilityOfKibanaDataLoader();
		// Set label text as "Showing data for last 30 days"
		var globalDateRangeLabelText = pervasiveInsightsTestData.globalDateRangeLabelText.format(pervasiveInsightsTestData.defaultCreatedFilterDateRangeDiff);
		// Verify by default the tab showing data for 30 days
		expect(pervasiveInsightsObj.getGlobalDateRangeLabelText()).toEqual(globalDateRangeLabelText);
		util.switchToDefault();
		util.switchToFrameById(frames.mcmpIframe);
		await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.topographyTabLink);
		// Verify if tab is selected, after clicking on it or not
		await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.topographyTabLink)).toBe(true);
		util.switchToFrameById(frames.cssrIFrame);
		await util.waitForInvisibilityOfKibanaDataLoader();
		// Verify by default the tab showing data for 30 days
		expect(pervasiveInsightsObj.getGlobalDateRangeLabelText()).toEqual(globalDateRangeLabelText);
		util.switchToDefault();
		util.switchToFrameById(frames.mcmpIframe);
		await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.ticketDetailsTabLink);
		// Verify if tab is selected, after clicking on it or not
		await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.ticketDetailsTabLink)).toBe(true);
		util.switchToFrameById(frames.cssrIFrame);
		await util.waitForInvisibilityOfKibanaDataLoader();
		// Verify by default the tab showing data for 30 days
		expect(pervasiveInsightsObj.getGlobalDateRangeLabelText()).toEqual(globalDateRangeLabelText);
		util.switchToDefault();
		util.switchToFrameById(frames.mcmpIframe);
		await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink);
		// Verify if tab is selected, after clicking on it or not
		await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
		util.switchToFrameById(frames.cssrIFrame);
		await util.waitForInvisibilityOfKibanaDataLoader();
		var last210DaysText = pervasiveInsightsTestData.lastCustomDaysDateRangeText.format(pervasiveInsightsTestData.dateRange210Days);
		// Set label text as "Showing data for last 210 days"
		globalDateRangeLabelText = pervasiveInsightsTestData.globalDateRangeLabelText.format(pervasiveInsightsTestData.dateRange210Days);
		await serviceMgmtUtil.clickOnDateRangeFilterButton(pervasiveInsightsTestData.createdFilterName);
		await expect(serviceMgmtUtil.verifyDateRangeFilterPanelExpanded(pervasiveInsightsTestData.createdFilterName)).toBe(true);
		await serviceMgmtUtil.selectDateRangeFilterValue(last210DaysText);
		await serviceMgmtUtil.clickOnApplyFilterButton();
		await util.waitForInvisibilityOfKibanaDataLoader();
		// Verify after applying date-range filter, the tab showing data for 210 days
		expect(pervasiveInsightsObj.getGlobalDateRangeLabelText()).toEqual(globalDateRangeLabelText);
		util.switchToDefault();
		util.switchToFrameById(frames.mcmpIframe);
		await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.topographyTabLink);
		// Verify if tab is selected, after clicking on it or not
		await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.topographyTabLink)).toBe(true);
		util.switchToFrameById(frames.cssrIFrame);
		await util.waitForInvisibilityOfKibanaDataLoader();
		// Verify after applying date-range filter, the tab showing data for 210 days
		expect(pervasiveInsightsObj.getGlobalDateRangeLabelText()).toEqual(globalDateRangeLabelText);
		util.switchToDefault();
		util.switchToFrameById(frames.mcmpIframe);
		await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.ticketDetailsTabLink);
		// Verify if tab is selected, after clicking on it or not
		await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.ticketDetailsTabLink)).toBe(true);
		util.switchToFrameById(frames.cssrIFrame);
		await util.waitForInvisibilityOfKibanaDataLoader();
		// Verify after applying date-range filter, the tab showing data for 210 days
		expect(pervasiveInsightsObj.getGlobalDateRangeLabelText()).toEqual(globalDateRangeLabelText);
		// Clearing "Created" date-range filter
		await util.clickOnResetFilterLink();
		await util.waitForInvisibilityOfKibanaDataLoader();
		// Set label text as "Showing data for last 30 days"
		globalDateRangeLabelText = pervasiveInsightsTestData.globalDateRangeLabelText.format(pervasiveInsightsTestData.defaultCreatedFilterDateRangeDiff);
		// Verify after clearing dat-range filter, the tab showing data for 30 days
		expect(pervasiveInsightsObj.getGlobalDateRangeLabelText()).toEqual(globalDateRangeLabelText);
		util.switchToDefault();
		util.switchToFrameById(frames.mcmpIframe);
		await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.topographyTabLink);
		// Verify if tab is selected, after clicking on it or not
		await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.topographyTabLink)).toBe(true);
		util.switchToFrameById(frames.cssrIFrame);
		await util.waitForInvisibilityOfKibanaDataLoader();
		// Verify after clearing date-range filter, the tab showing data for 30 days
		expect(pervasiveInsightsObj.getGlobalDateRangeLabelText()).toEqual(globalDateRangeLabelText);
		util.switchToDefault();
		util.switchToFrameById(frames.mcmpIframe);
		await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink);
		// Verify if tab is selected, after clicking on it or not
		await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
		util.switchToFrameById(frames.cssrIFrame);
		await util.waitForInvisibilityOfKibanaDataLoader();
		// Verify after clearing date-range filter, the tab showing data for 30 days
		expect(pervasiveInsightsObj.getGlobalDateRangeLabelText()).toEqual(globalDateRangeLabelText);
	});

	it("Verify Global filters functionality on Pervasive Issue Analysis tab", async function(){
		serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink);
		// Verify if tab is selected, after clicking on it or not
        expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
		util.switchToFrameById(frames.cssrIFrame);
		util.waitForInvisibilityOfKibanaDataLoader();
		// Iterate through each multi-select filter, select first value and verify tooltip text for each tab
		for(var globalFilter of globalFilterList){
			await serviceMgmtUtil.clickOnFilterButtonBasedOnName(globalFilter);
			await expect(serviceMgmtUtil.verifyFilterPanelExpanded(globalFilter)).toBe(true);
			var filterValue = await serviceMgmtUtil.selectFirstFilterValueBasedOnName(globalFilter);
			await serviceMgmtUtil.clickOnUpdateFilterButton(globalFilter);
			await serviceMgmtUtil.clickOnApplyFilterButton();
			util.waitForInvisibilityOfKibanaDataLoader();
			// Verify tooltip text with applied filter value
			await expect(serviceMgmtUtil.getGlobalFilterButtonToolTipText(globalFilter)).toEqual(filterValue);
			await serviceMgmtUtil.deselectFilterValue(globalFilter, filterValue);
		}
		// Set date-range filter value
		var last210DaysText = pervasiveInsightsTestData.lastCustomDaysDateRangeText.format(pervasiveInsightsTestData.dateRange210Days);
		// Iterate through each date-range filter, select first value and verify tooltip text for each tab
		for(var dateRangeFilter of dateRangeFilterList){
			await serviceMgmtUtil.clickOnDateRangeFilterButton(dateRangeFilter);
			await expect(serviceMgmtUtil.verifyDateRangeFilterPanelExpanded(dateRangeFilter)).toBe(true);
			await serviceMgmtUtil.selectDateRangeFilterValue(last210DaysText);
			await serviceMgmtUtil.clickOnApplyFilterButton();
			await util.waitForInvisibilityOfKibanaDataLoader();
			// Verify tooltip text with applied filter value
			await expect(serviceMgmtUtil.getDaysFromDateRangeFilterToolTip(dateRangeFilter)).toEqual(pervasiveInsightsTestData.dateRange210Days);
			// Clear filter and check default tooltip value
			await util.clickOnResetFilterLink();
			await util.waitForInvisibilityOfKibanaDataLoader();
		}
		// Validate default values for date-range filter after clearing it
		await expect(serviceMgmtUtil.getDateRangeFilterDateDifference(pervasiveInsightsTestData.createdFilterName)).toEqual(pervasiveInsightsTestData.defaultCreatedFilterDateRangeDiff);
		await expect(serviceMgmtUtil.getGlobalFilterButtonToolTipText(pervasiveInsightsTestData.resolvedFilterName)).toEqual(pervasiveInsightsTestData.noneSelectedTooltipText);
	});

	it("Verify Global filters functionality on Topography tab", async function(){
		serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.topographyTabLink);
		// Verify if tab is selected, after clicking on it or not
        expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.topographyTabLink)).toBe(true);
		util.switchToFrameById(frames.cssrIFrame);
		await util.waitForInvisibilityOfKibanaDataLoader();
		// Iterate through each multi-select filter, select first value and verify tooltip text for each tab
		for(var globalFilter of globalFilterList){
			await serviceMgmtUtil.clickOnFilterButtonBasedOnName(globalFilter);
			await expect(serviceMgmtUtil.verifyFilterPanelExpanded(globalFilter)).toBe(true);
			var filterValue = await serviceMgmtUtil.selectFirstFilterValueBasedOnName(globalFilter);
			await serviceMgmtUtil.clickOnUpdateFilterButton(globalFilter);
			await serviceMgmtUtil.clickOnApplyFilterButton();
			await util.waitForInvisibilityOfKibanaDataLoader();
			// Verify tooltip text with applied filter value
			await expect(serviceMgmtUtil.getGlobalFilterButtonToolTipText(globalFilter)).toEqual(filterValue);
			await serviceMgmtUtil.deselectFilterValue(globalFilter, filterValue);
		}
		// Set date-range filter value
		var last210DaysText = pervasiveInsightsTestData.lastCustomDaysDateRangeText.format(pervasiveInsightsTestData.dateRange210Days);
		// Iterate through each date-range filter, select first value and verify tooltip text for each tab
		for(var dateRangeFilter of dateRangeFilterList){
			await serviceMgmtUtil.clickOnDateRangeFilterButton(dateRangeFilter);
			await expect(serviceMgmtUtil.verifyDateRangeFilterPanelExpanded(dateRangeFilter)).toBe(true);
			await serviceMgmtUtil.selectDateRangeFilterValue(last210DaysText);
			await serviceMgmtUtil.clickOnApplyFilterButton();
			await util.waitForInvisibilityOfKibanaDataLoader();
			// Verify tooltip text with applied filter value
			await expect(serviceMgmtUtil.getDaysFromDateRangeFilterToolTip(dateRangeFilter)).toEqual(pervasiveInsightsTestData.dateRange210Days);
			// Clear filter and check default tooltip value
			await util.clickOnResetFilterLink();
			await util.waitForInvisibilityOfKibanaDataLoader();
		}
		// Validate default values for date-range filter after clearing it
		await expect(serviceMgmtUtil.getDateRangeFilterDateDifference(pervasiveInsightsTestData.createdFilterName)).toEqual(pervasiveInsightsTestData.defaultCreatedFilterDateRangeDiff);
		await expect(serviceMgmtUtil.getGlobalFilterButtonToolTipText(pervasiveInsightsTestData.resolvedFilterName)).toEqual(pervasiveInsightsTestData.noneSelectedTooltipText);
	});

	it("Verify Global filters functionality on Ticket Details tab", async function(){
		serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.ticketDetailsTabLink);
		// Verify if tab is selected, after clicking on it or not
        expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.ticketDetailsTabLink)).toBe(true);
		util.switchToFrameById(frames.cssrIFrame);
		await util.waitForInvisibilityOfKibanaDataLoader();
		// Iterate through each multi-select filter, select first value and verify tooltip text for each tab
		for(var globalFilter of globalFilterList){
			await serviceMgmtUtil.clickOnFilterButtonBasedOnName(globalFilter);
			await expect(serviceMgmtUtil.verifyFilterPanelExpanded(globalFilter)).toBe(true);
			var filterValue = await serviceMgmtUtil.selectFirstFilterValueBasedOnName(globalFilter);
			await serviceMgmtUtil.clickOnUpdateFilterButton(globalFilter);
			await serviceMgmtUtil.clickOnApplyFilterButton();
			await util.waitForInvisibilityOfKibanaDataLoader();
			// Verify tooltip text with applied filter value
			await expect(serviceMgmtUtil.getGlobalFilterButtonToolTipText(globalFilter)).toEqual(filterValue);
			await serviceMgmtUtil.deselectFilterValue(globalFilter, filterValue);
		}
		// Set date-range filter value
		var last210DaysText = pervasiveInsightsTestData.lastCustomDaysDateRangeText.format(pervasiveInsightsTestData.dateRange210Days);
		// Iterate through each date-range filter, select first value and verify tooltip text for each tab
		for(var dateRangeFilter of dateRangeFilterList){
			await serviceMgmtUtil.clickOnDateRangeFilterButton(dateRangeFilter);
			await expect(serviceMgmtUtil.verifyDateRangeFilterPanelExpanded(dateRangeFilter)).toBe(true);
			await serviceMgmtUtil.selectDateRangeFilterValue(last210DaysText);
			await serviceMgmtUtil.clickOnApplyFilterButton();
			await util.waitForInvisibilityOfKibanaDataLoader();
			// Verify tooltip text with applied filter value
			await expect(serviceMgmtUtil.getDaysFromDateRangeFilterToolTip(dateRangeFilter)).toEqual(pervasiveInsightsTestData.dateRange210Days);
			// Clear filter and check default tooltip value
			await util.clickOnResetFilterLink();
			await util.waitForInvisibilityOfKibanaDataLoader();
		}
		// Validate default values for date-range filter after clearing it
		await expect(serviceMgmtUtil.getDateRangeFilterDateDifference(pervasiveInsightsTestData.createdFilterName)).toEqual(pervasiveInsightsTestData.defaultCreatedFilterDateRangeDiff);
		await expect(serviceMgmtUtil.getGlobalFilterButtonToolTipText(pervasiveInsightsTestData.resolvedFilterName)).toEqual(pervasiveInsightsTestData.noneSelectedTooltipText);
	});

	it("Verify applied Global filter persist across all tabs within Pervasive Insights and won't persist when moved to another report page", async function(){
		serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink);
		// Verify if tab is selected, after clicking on it or not
        expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
		util.switchToFrameById(frames.cssrIFrame);
		await util.waitForInvisibilityOfKibanaDataLoader();
		// Apply Contact Type filter with its first value
		serviceMgmtUtil.clickOnFilterButtonBasedOnName(pervasiveInsightsTestData.contactTypeFilterName);
		expect(serviceMgmtUtil.verifyFilterPanelExpanded(pervasiveInsightsTestData.contactTypeFilterName)).toBe(true);
		var filterValue = await serviceMgmtUtil.selectFirstFilterValueBasedOnName(pervasiveInsightsTestData.contactTypeFilterName);
		await serviceMgmtUtil.clickOnUpdateFilterButton(pervasiveInsightsTestData.contactTypeFilterName);
		await serviceMgmtUtil.clickOnApplyFilterButton();
		await util.waitForInvisibilityOfKibanaDataLoader();
		// Verify tooltip text with applied filter value
		expect(serviceMgmtUtil.getGlobalFilterButtonToolTipText(pervasiveInsightsTestData.contactTypeFilterName)).toEqual(filterValue);
		var totalTicketCount = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.totalTicketCountWidgetName);
		var serverCountTab1 = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.serverCountWidgetName);
		// Remove comma (',') from string and convert to integer
		var totalTicketCountInt = util.stringToInteger(totalTicketCount);
		util.switchToDefault();
		util.switchToFrameById(frames.mcmpIframe);
		// Navigate to Topography tab 
		serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.topographyTabLink);
		expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.topographyTabLink)).toBe(true);
		util.switchToFrameById(frames.cssrIFrame);
		await util.waitForInvisibilityOfKibanaDataLoader();
		// Verify tooltip text on Toporaphy tab with applied filter value on Pervasive Issue analysis tab
		expect(serviceMgmtUtil.getGlobalFilterButtonToolTipText(pervasiveInsightsTestData.contactTypeFilterName)).toEqual(filterValue);
		var serverCountTab2 = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.serverCountWidgetName);
		// Verify Server count on Pervasive issue analysis tab equals to Server count on Topography tab
		expect(serverCountTab1).toEqual(serverCountTab2);
		util.switchToDefault();
		util.switchToFrameById(frames.mcmpIframe);
		// Navigate to Ticket details tab
		serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.ticketDetailsTabLink);
		expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.ticketDetailsTabLink)).toBe(true);
		util.switchToFrameById(frames.cssrIFrame);
		await util.waitForInvisibilityOfKibanaDataLoader();
		// Verify tooltip text on Ticket details tab with applied filter value on Pervasive Issue analysis tab
		expect(serviceMgmtUtil.getGlobalFilterButtonToolTipText(pervasiveInsightsTestData.contactTypeFilterName)).toEqual(filterValue);
		// Verify if Ticket details tab table row count equals to Tickets count from Pervasive issue analysis tab
		expect(serviceMgmtUtil.getTicketDetailsTableRowsCount()).toEqual(totalTicketCountInt);
		// Navigate to Problem Management page
		launchpadObj.clickOnHamburgerMenu(launchpadTestData.leftNavigationExpanded);
		launchpadObj.clickOnleftNavigationMenuBasedOnName(launchpadTestData.aIOpsIntelligentITOperationsBtn);
		launchpadObj.clickLeftNavCardBasedOnName(launchpadTestData.problemManagementCard);
		problemManagementObj.open();
		// Navigate back to Pervasive Insights page
		pervasiveInsightsObj.open();
		expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
		util.switchToFrameById(frames.cssrIFrame);
		await util.waitForInvisibilityOfKibanaDataLoader();
		// Verify tooltip text on Pervasive Issue Analysis tab with default tooltip text
		expect(serviceMgmtUtil.getGlobalFilterButtonToolTipText(pervasiveInsightsTestData.contactTypeFilterName)).toEqual(pervasiveInsightsTestData.noneSelectedTooltipText);
	});

	it("Validate all widget Names are Present on 'Pervasive Issue Analysis' Tab", async function(){
		await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink);
		// Verify if tab is selected, after clicking on it or not
		await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
		util.switchToFrameById(frames.cssrIFrame);
		util.waitForInvisibilityOfKibanaDataLoader();
		// Check all widgets on Kibana report are Present
		expect(serviceMgmtUtil.verifyWidgetNamesPresentOnKibanaReport(pervasiveIssueAnalysisTabWidgetNameList)).toBe(true);
		if (browser.params.dataValiadtion) {
			var serverCount = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.serverCountWidgetName);
			var MTTRInclVal = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.mttrIncHoldWidegetName);
			var MTTRExclVal = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.mttrExcHoldWidgetName);
			var autoTicketCount = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.autoTicketWidgetName);
			var userTicketCount = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.userTicketWidgetName);
			var totalTicketCount = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.totalTicketCountWidgetName);
			logger.info("------Data validation------");
			expect(util.stringToInteger(serverCount)).toEqual(pervasiveIssueAnalysis_expectedData.server_count);
			expect(parseFloat(MTTRInclVal)).toEqual(pervasiveIssueAnalysis_expectedData.mttr_incl_hold);
			expect(parseFloat(MTTRExclVal)).toEqual(pervasiveIssueAnalysis_expectedData.mttr_excl_hold);
			expect(util.stringToInteger(autoTicketCount)).toEqual(pervasiveIssueAnalysis_expectedData.auto_ticket);
			expect(util.stringToInteger(userTicketCount)).toEqual(pervasiveIssueAnalysis_expectedData.user_ticket);
			expect(util.stringToInteger(totalTicketCount)).toEqual(pervasiveIssueAnalysis_expectedData.total_ticket_count);
		}
	});

	it("Validate all widget Names are Present on 'Topography' Tab", async function(){
		await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.topographyTabLink);
		// Verify if tab is selected, after clicking on it or not
		await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.topographyTabLink)).toBe(true);
		util.switchToFrameById(frames.cssrIFrame);
		util.waitForInvisibilityOfKibanaDataLoader();
		// Check all widgets on Kibana report are Present
		expect(serviceMgmtUtil.verifyWidgetNamesPresentOnKibanaReport(topographyTabWidgetNameList)).toBe(true);
		if (browser.params.dataValiadtion) {
			var serverCount = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.serverCountWidgetName);
			var MTTRInclVal = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.mttrIncHoldWidegetName);
			var MTTRExclVal = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.mttrExcHoldWidgetName);
			var siteIDCount = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.siteIDCountWidgetName);
			var streetAddrCount = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.streetAddrCountWidgetName);
			var countryViewCount = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.countryViewCountWidgetName);
			logger.info("------Data validation------");
			expect(util.stringToInteger(serverCount)).toEqual(topography_expectedData.server_count);
			expect(parseFloat(MTTRInclVal)).toEqual(topography_expectedData.mttr_incl_hold);
			expect(parseFloat(MTTRExclVal)).toEqual(topography_expectedData.mttr_excl_hold);
			expect(util.stringToInteger(siteIDCount)).toEqual(topography_expectedData.site_id_count);
			expect(util.stringToInteger(streetAddrCount)).toEqual(topography_expectedData.street_address_count);
			expect(util.stringToInteger(countryViewCount)).toEqual(topography_expectedData.country_view_count);
		}
	});

	it("Verify all column names are Present in 'Ticket Details' table", async function(){
		await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.ticketDetailsTabLink);
		// Verify if tab is selected, after clicking on it or not
		await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.ticketDetailsTabLink)).toBe(true);
		util.switchToFrameById(frames.cssrIFrame);
		util.waitForInvisibilityOfKibanaDataLoader();
		// Check all column names in ticket details table
		expect(serviceMgmtUtil.verifyColumnNamesPresentInTicketDetailsTable(ticketDetailsColumnList)).toBe(true);
	})

    it("Verify Total ticket count from Pervasive Issue Analysis tab with Ticket Details table and downloaded ticket details xlsx", async function(){
		serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink);
		// Verify if tab is selected, after clicking on it or not
        expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
		util.switchToFrameById(frames.cssrIFrame);
		await util.waitForInvisibilityOfKibanaDataLoader();
		/**
		 * Verify total ticket count on Pervasive issue analysis tab with ticket details table row count
		 * If Total ticket count >= 10000
		 */
		var totalTicketCount = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.totalTicketCountWidgetName);
		// Remove comma (',') from string and convert to integer
		var totalTicketCountInt = util.stringToInteger(totalTicketCount);
		util.switchToDefault();
		util.switchToFrameById(frames.mcmpIframe);
		// Navigate to Ticket details tab
		serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.ticketDetailsTabLink);
		util.switchToFrameById(frames.cssrIFrame);
		await util.waitForInvisibilityOfKibanaDataLoader();
		if(totalTicketCountInt >= 10000){
			// Verify if Ticket details tab table row count equals to Tickets count from Pervasive issue analysis tab
			expect(serviceMgmtUtil.getTicketDetailsTableRowsCount()).toEqual(totalTicketCountInt);
			await serviceMgmtUtil.downloadTicketDetailsXlsx();
			// Verify if the downloaded file exists or not
			expect(util.isTicketDetailsFileExists()).toBe(true);
			var json_data = util.getDataFromXlsxFile();
			// Verify if Tickets count from Json data equals to 10000 [Max number of rows in xlsx file if Total ticket count >= 10000]
			expect(pervasiveInsightsTestData.maxRowsTicketDetailsXlsx).toEqual(util.getTicketCountFromJsonData(json_data));
		}
		if (browser.params.dataValiadtion) {
			logger.info("------Data validation------");
			var ticketNumberForDefaultFilters = ticketDetails_expectedData.default_filters.expected_values.ticket_id;
			expect(await serviceMgmtUtil.isTicketNumberPresentInTicketDetailsTable(ticketNumberForDefaultFilters)).toBe(true);
		}
		/**
		 * Verify total ticket count on Pervasive issue analysis tab with ticket details table row count and with downloaded xlsx row count
		 * If Total ticket count < 10000
		 */
		util.switchToDefault();
		util.switchToFrameById(frames.mcmpIframe);
		// Navigate to Pervaisve issue analysis tab
		serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink);
		util.switchToFrameById(frames.cssrIFrame);
		util.waitForInvisibilityOfKibanaDataLoader();
		// Set Total ticket count below 10K
		await serviceMgmtUtil.setTicketCountBelow10K(pervasiveInsightsTestData.totalTicketCountWidgetName, globalFilterList);
		totalTicketCount = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.totalTicketCountWidgetName);
		// Remove comma (',') from string and convert to integer
		totalTicketCountInt = util.stringToInteger(totalTicketCount);
		util.switchToDefault();
		util.switchToFrameById(frames.mcmpIframe);
		// Navigate to Ticket details tab
        serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.ticketDetailsTabLink);
		util.switchToFrameById(frames.cssrIFrame);
		util.waitForInvisibilityOfKibanaDataLoader();
		// Verify if Ticket details tab table row count equals to Tickets count from Pervasive issue analysis tab
		expect(serviceMgmtUtil.getTicketDetailsTableRowsCount()).toEqual(totalTicketCountInt);
		await serviceMgmtUtil.downloadTicketDetailsXlsx();
		// Verify if the downloaded file exists or not
		expect(util.isTicketDetailsFileExists()).toBe(true);
		var json_data = util.getDataFromXlsxFile();
		// Verify if Tickets count from Pervasive issue analysis tab equals to Tickets count from Json data
		expect(totalTicketCountInt).toEqual(util.getTicketCountFromJsonData(json_data));
	});

	if (browser.params.dataValiadtion) {
		logger.info("------Data validation------");
		it("Data validation for 'Ticket Details' tab with Global Filters", async function(){
			serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.ticketDetailsTabLink);
			// Verify if tab is selected, after clicking on it or not
			expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.ticketDetailsTabLink)).toBe(true);
			util.switchToFrameById(frames.cssrIFrame);
			await util.waitForInvisibilityOfKibanaDataLoader();
			// Filter 1
			var filterValue = ticketDetails_expectedData.filter_1.assignment_group;
			var ticketNumberForFilter = ticketDetails_expectedData.filter_1.expected_values.ticket_id;
			logger.info("Filter value: "+filterValue+"; Ticket Number: "+ticketNumberForFilter);
			serviceMgmtUtil.clickOnFilterButtonBasedOnName(pervasiveInsightsTestData.assignmentGroupFilterName);
			serviceMgmtUtil.selectFilterValueBasedOnName(pervasiveInsightsTestData.assignmentGroupFilterName, filterValue);
			serviceMgmtUtil.clickOnApplyFilterButton(pervasiveInsightsTestData.assignmentGroupFilterName);
			await util.waitForInvisibilityOfKibanaDataLoader();
			expect(await serviceMgmtUtil.isTicketNumberPresentInTicketDetailsTable(ticketNumberForFilter)).toBe(true);
			util.clickOnResetFilterLink();
			await util.waitForInvisibilityOfKibanaDataLoader();
			// Filter 2
			filterValue = ticketDetails_expectedData.filter_2.contact_type;
			ticketNumberForFilter = ticketDetails_expectedData.filter_2.expected_values.ticket_id;
			logger.info("Filter value: "+filterValue+"; Ticket Number: "+ticketNumberForFilter);
			serviceMgmtUtil.clickOnFilterButtonBasedOnName(pervasiveInsightsTestData.contactTypeFilterName);
			serviceMgmtUtil.selectFilterValueBasedOnName(pervasiveInsightsTestData.contactTypeFilterName, filterValue);
			serviceMgmtUtil.clickOnApplyFilterButton(pervasiveInsightsTestData.contactTypeFilterName);
			await util.waitForInvisibilityOfKibanaDataLoader();
			expect(await serviceMgmtUtil.isTicketNumberPresentInTicketDetailsTable(ticketNumberForFilter)).toBe(true);
			util.clickOnResetFilterLink();
			await util.waitForInvisibilityOfKibanaDataLoader();
			// Filter 3
			filterValue = ticketDetails_expectedData.filter_3.created;
			ticketNumberForFilter = ticketDetails_expectedData.filter_3.expected_values.ticket_id;
			logger.info("Filter value: "+filterValue+"; Ticket Number: "+ticketNumberForFilter);
			serviceMgmtUtil.clickOnDateRangeFilterButton(pervasiveInsightsTestData.createdFilterName);
			serviceMgmtUtil.selectDateRangeFilterValue(filterValue);
			await util.waitForInvisibilityOfKibanaDataLoader();
			expect(await serviceMgmtUtil.isTicketNumberPresentInTicketDetailsTable(ticketNumberForFilter)).toBe(true);
			util.clickOnResetFilterLink();
			await util.waitForInvisibilityOfKibanaDataLoader();
			// Filter 5
			filterValue = ticketDetails_expectedData.filter_5.opco;
			ticketNumberForFilter = ticketDetails_expectedData.filter_5.expected_values.ticket_id;
			logger.info("Filter value: "+filterValue+"; Ticket Number: "+ticketNumberForFilter);
			serviceMgmtUtil.clickOnFilterButtonBasedOnName(pervasiveInsightsTestData.opcoFilterName);
			serviceMgmtUtil.selectFilterValueBasedOnName(pervasiveInsightsTestData.opcoFilterName, filterValue);
			serviceMgmtUtil.clickOnApplyFilterButton(pervasiveInsightsTestData.opcoFilterName);
			await util.waitForInvisibilityOfKibanaDataLoader();
			expect(await serviceMgmtUtil.isTicketNumberPresentInTicketDetailsTable(ticketNumberForFilter)).toBe(true);
			util.clickOnResetFilterLink();
			await util.waitForInvisibilityOfKibanaDataLoader();
			// Filter 9
			var filterValue1 = ticketDetails_expectedData.filter_9.assignment_group;
			var filterValue2 = ticketDetails_expectedData.filter_9.created;
			ticketNumberForFilter = ticketDetails_expectedData.filter_9.expected_values.ticket_id;
			logger.info("Filter value 1: "+filterValue1+"; Filter value 2: "+filterValue2+"; Ticket Number: "+ticketNumberForFilter);
			serviceMgmtUtil.clickOnFilterButtonBasedOnName(pervasiveInsightsTestData.assignmentGroupFilterName);
			serviceMgmtUtil.selectFilterValueBasedOnName(pervasiveInsightsTestData.assignmentGroupFilterName, filterValue1);
			serviceMgmtUtil.clickOnApplyFilterButton(pervasiveInsightsTestData.assignmentGroupFilterName);
			await util.waitForInvisibilityOfKibanaDataLoader();
			serviceMgmtUtil.clickOnDateRangeFilterButton(pervasiveInsightsTestData.createdFilterName);
			serviceMgmtUtil.selectDateRangeFilterValue(filterValue2);
			await util.waitForInvisibilityOfKibanaDataLoader();
			expect(await serviceMgmtUtil.isTicketNumberPresentInTicketDetailsTable(ticketNumberForFilter)).toBe(true);
			util.clickOnResetFilterLink();
			await util.waitForInvisibilityOfKibanaDataLoader();
			// Filter 12
			filterValue1 = ticketDetails_expectedData.filter_12.assignment_group;
			filterValue2 = ticketDetails_expectedData.filter_12.parent;
			ticketNumberForFilter = ticketDetails_expectedData.filter_12.expected_values.ticket_id;
			logger.info("Filter value 1: "+filterValue1+"; Filter value 2: "+filterValue2+"; Ticket Number: "+ticketNumberForFilter);
			serviceMgmtUtil.clickOnFilterButtonBasedOnName(pervasiveInsightsTestData.assignmentGroupFilterName);
			serviceMgmtUtil.selectFilterValueBasedOnName(pervasiveInsightsTestData.assignmentGroupFilterName, filterValue1);
			serviceMgmtUtil.clickOnApplyFilterButton(pervasiveInsightsTestData.assignmentGroupFilterName);
			await util.waitForInvisibilityOfKibanaDataLoader();
			serviceMgmtUtil.clickOnFilterButtonBasedOnName(pervasiveInsightsTestData.parentFilterName);
			serviceMgmtUtil.selectFilterValueBasedOnName(pervasiveInsightsTestData.parentFilterName, filterValue2);
			serviceMgmtUtil.clickOnApplyFilterButton(pervasiveInsightsTestData.parentFilterName);
			await util.waitForInvisibilityOfKibanaDataLoader();
			expect(await serviceMgmtUtil.isTicketNumberPresentInTicketDetailsTable(ticketNumberForFilter)).toBe(true);
			util.clickOnResetFilterLink();
			await util.waitForInvisibilityOfKibanaDataLoader();
			// Filter 22
			filterValue1 = ticketDetails_expectedData.filter_22.created;
			filterValue2 = ticketDetails_expectedData.filter_22.resolved;
			ticketNumberForFilter = ticketDetails_expectedData.filter_22.expected_values.ticket_id;
			logger.info("Filter value 1: "+filterValue1+"; Filter value 2: "+filterValue2+"; Ticket Number: "+ticketNumberForFilter);
			serviceMgmtUtil.clickOnDateRangeFilterButton(pervasiveInsightsTestData.createdFilterName);
			serviceMgmtUtil.selectDateRangeFilterValue(filterValue1);
			await util.waitForInvisibilityOfKibanaDataLoader();
			serviceMgmtUtil.clickOnDateRangeFilterButton(pervasiveInsightsTestData.resolvedFilterName);
			serviceMgmtUtil.selectDateRangeFilterValue(filterValue2);
			await util.waitForInvisibilityOfKibanaDataLoader();
			expect(await serviceMgmtUtil.isTicketNumberPresentInTicketDetailsTable(ticketNumberForFilter)).toBe(true);
			util.clickOnResetFilterLink();
			await util.waitForInvisibilityOfKibanaDataLoader();
		});
	}
	
	it("Verify aplied Local filters won't persist across all tabs", async function(){
		await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink);
		// Verify if tab is selected, after clicking on it or not
		await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
		util.switchToFrameById(frames.cssrIFrame);
		await util.waitForInvisibilityOfKibanaDataLoader();
		// Verify all priority view local filters before click on any one
		var legendsList = await serviceMgmtUtil.getLegendNamesFromLocalFilter(pervasiveInsightsTestData.priorityViewWidgetName);
		var isListEmpty = util.isListEmpty(legendsList);
		expect(isListEmpty).toBe(false);
		if(!isListEmpty){
			legendsList.forEach(function (legendName){
				expect(serviceMgmtUtil.verifySectionFromBoxFilterWidget(pervasiveInsightsTestData.priorityViewWidgetName, legendName)).toBe(true);
			});
			if (browser.params.dataValiadtion) {
				logger.info("------Data validation------");
				// Get json object for a widget
				var jsonObjForPriorityViewWidget = pervasiveIssueAnalysis_expectedData.priority_view;
				expect(await serviceMgmtUtil.verifyValuesFromJSONAndUIForBoxFilters(pervasiveInsightsTestData.priorityViewWidgetName,jsonObjForPriorityViewWidget)).toBe(true);
			}
			// Click on first priority view filter
			pervasiveInsightsObj.clickOnPriorityViewFilter(legendsList[0]);
			await util.waitForInvisibilityOfKibanaDataLoader();
			// Verify all priority view local filters after click on first one
			expect(serviceMgmtUtil.verifySectionFromBoxFilterWidget(pervasiveInsightsTestData.priorityViewWidgetName,legendsList[0])).toBe(true);
			for(var i=1; i<legendsList.length; i++){
				expect(serviceMgmtUtil.verifySectionFromBoxFilterWidget(pervasiveInsightsTestData.priorityViewWidgetName,legendsList[i])).toBe(false);
			}
			var totalTicketCount = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.totalTicketCountWidgetName);
			var totalTicketCountIntBefore = util.stringToInteger(totalTicketCount);
			// Verify if the Total ticket count from widget equals to Tooltip text ticket count from selected priority view filter
			expect(serviceMgmtUtil.getCountFromBoxFilterSections(pervasiveInsightsTestData.priorityViewWidgetName, legendsList[0])).toEqual(totalTicketCountIntBefore);
			var serverCountFromPervasiveIssueAnalysisTab = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.serverCountWidgetName);
			var serverCountFromPervasiveIssueAnalysisTabInt = util.stringToInteger(serverCountFromPervasiveIssueAnalysisTab);
			// Navigate to Topography tab
			util.switchToDefault();
			util.switchToFrameById(frames.mcmpIframe);
			await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.topographyTabLink);
			// Verify if tab is selected, after clicking on it or not
			await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.topographyTabLink)).toBe(true);
			util.switchToFrameById(frames.cssrIFrame);
			await util.waitForInvisibilityOfKibanaDataLoader();
			var serverCountFromTopographyTab = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.serverCountWidgetName);
			var serverCountFromTopographyTabInt = util.stringToInteger(serverCountFromTopographyTab);
			// Verify if Server count on Pervasive issue analysis tab not equals to Server count on Topography tab
			expect(serverCountFromPervasiveIssueAnalysisTabInt).toBeLessThan(serverCountFromTopographyTabInt);
			// Navigate to Ticket details tab
			util.switchToDefault();
			util.switchToFrameById(frames.mcmpIframe);
			await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.ticketDetailsTabLink);
			// Verify if tab is selected, after clicking on it or not
			await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.ticketDetailsTabLink)).toBe(true);
			util.switchToFrameById(frames.cssrIFrame);
			await util.waitForInvisibilityOfKibanaDataLoader();
			// Verify if Ticket details tab table row count not equals to Tickets count from Pervasive issue analysis tab
			expect(totalTicketCountIntBefore).toBeLessThan(serviceMgmtUtil.getTicketDetailsTableRowsCount());
			// Navigate to Pervasive issue analysis tab
			util.switchToDefault();
			util.switchToFrameById(frames.mcmpIframe);
			await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink);
			// Verify if tab is selected, after clicking on it or not
			await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
			util.switchToFrameById(frames.cssrIFrame);
			await util.waitForInvisibilityOfKibanaDataLoader();
			// Verify all priority view local filters
			legendsList.forEach(function (legendName){
				expect(serviceMgmtUtil.verifySectionFromBoxFilterWidget(pervasiveInsightsTestData.priorityViewWidgetName,legendName)).toBe(true);
			});
			totalTicketCount = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.totalTicketCountWidgetName);
			var totalTicketCountIntAfter = util.stringToInteger(totalTicketCount);
			// Verify Total ticket count after applying local filters and navigate back to same tab
			expect(totalTicketCountIntBefore).toBeLessThan(totalTicketCountIntAfter);
		}
	});

	it("Verify Box local filters on Pervasive Issue Analysis tab", async function(){
		var isPresent = true;
		await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink);
		// Verify if tab is selected, after clicking on it or not
		await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
		util.switchToFrameById(frames.cssrIFrame);
		await util.waitForInvisibilityOfKibanaDataLoader();
		// Verify box local filters [Server count, Opco, Top 50 category, Assignment group] ticket count with Total ticket count widget
		isPresent = await serviceMgmtUtil.clickOnFirstBoxLocalFilter(pervasiveInsightsTestData.serverFunctionWidgetName);
		util.waitForInvisibilityOfKibanaDataLoader();
		if(isPresent){
			var ticketCountFromServerCountLocalFilterTooltip = await serviceMgmtUtil.getTicketCountFromBoxLocalFilterTooltipText(pervasiveInsightsTestData.serverFunctionWidgetName);
			var totalTicketCount = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.totalTicketCountWidgetName);
			expect(ticketCountFromServerCountLocalFilterTooltip).toEqual(util.stringToInteger(totalTicketCount));
		}
		isPresent = await serviceMgmtUtil.clickOnFirstBoxLocalFilter(pervasiveInsightsTestData.opcoWidgetName);
		util.waitForInvisibilityOfKibanaDataLoader();
		if(isPresent){
			var ticketCountFromOpcoLocalFilterTooltip = await serviceMgmtUtil.getTicketCountFromBoxLocalFilterTooltipText(pervasiveInsightsTestData.opcoWidgetName);
			totalTicketCount = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.totalTicketCountWidgetName);
			expect(ticketCountFromOpcoLocalFilterTooltip).toEqual(util.stringToInteger(totalTicketCount));
		}
		isPresent = await serviceMgmtUtil.clickOnFirstBoxLocalFilter(pervasiveInsightsTestData.top50CategoryWidgetName);
		util.waitForInvisibilityOfKibanaDataLoader();
		if(isPresent){
			var ticketCountFromTop50CategoryLocalFilterTooltip = await serviceMgmtUtil.getTicketCountFromBoxLocalFilterTooltipText(pervasiveInsightsTestData.top50CategoryWidgetName);
			totalTicketCount = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.totalTicketCountWidgetName);
			expect(ticketCountFromTop50CategoryLocalFilterTooltip).toEqual(util.stringToInteger(totalTicketCount));
		}
		isPresent = await serviceMgmtUtil.clickOnFirstBoxLocalFilter(pervasiveInsightsTestData.assignmentGroupWidgetName);
		util.waitForInvisibilityOfKibanaDataLoader();
		if(isPresent){
			var ticketCountFromAssignmentGrpLocalFilterTooltip = await serviceMgmtUtil.getTicketCountFromBoxLocalFilterTooltipText(pervasiveInsightsTestData.assignmentGroupWidgetName);
			totalTicketCount = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.totalTicketCountWidgetName);
			expect(ticketCountFromAssignmentGrpLocalFilterTooltip).toEqual(util.stringToInteger(totalTicketCount));
		}
	});

	it("Verify Box local filters on Topography tab", async function(){
		var isPresent = true;
		await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.topographyTabLink);
		// Verify if tab is selected, after clicking on it or not
		await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.topographyTabLink)).toBe(true);
		util.switchToFrameById(frames.cssrIFrame);
		await util.waitForInvisibilityOfKibanaDataLoader();
		var totalTicketCountBeforeLocalFilter = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.streetAddrCountWidgetName);
		// Verify box local filter [Street Address View] ticket count with Total ticket count widget
		isPresent = await serviceMgmtUtil.clickOnFirstBoxLocalFilter(pervasiveInsightsTestData.streetAddrViewWidgetName);
		await util.waitForInvisibilityOfKibanaDataLoader();
		if(isPresent){
			await serviceMgmtUtil.getTicketCountFromBoxLocalFilterTooltipText(pervasiveInsightsTestData.streetAddrViewWidgetName);
			var totalTicketCountAfterLocalFilter = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.streetAddrCountWidgetName);
			expect(totalTicketCountAfterLocalFilter).toBeLessThan(totalTicketCountBeforeLocalFilter);
		}
	});

	it("Verify reset global filters functionality", async function(){
		serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink);
		// Verify if tab is selected, after clicking on it or not
		expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
		util.switchToFrameById(frames.cssrIFrame);
		await util.waitForInvisibilityOfKibanaDataLoader();
		var totalTicketCountBefore = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.totalTicketCountWidgetName);
		// Remove comma (',') from string and convert to integer
		var totalTicketCountBeforeInt = util.stringToInteger(totalTicketCountBefore);
		// Validate the default global filter is applied for "Last 30 days" on Created date-range filter
		expect(serviceMgmtUtil.getDateRangeFilterDateDifference(pervasiveInsightsTestData.createdFilterName)).toEqual(pervasiveInsightsTestData.defaultCreatedFilterDateRangeDiff);
		// Verify default tooltip text for global filter Assignment Queue
		expect(serviceMgmtUtil.getGlobalFilterButtonToolTipText(pervasiveInsightsTestData.assignmentQueueFilterName)).toEqual(pervasiveInsightsTestData.noneSelectedTooltipText);
		// Apply Assignment Queue filter with its first value
		serviceMgmtUtil.clickOnFilterButtonBasedOnName(pervasiveInsightsTestData.assignmentQueueFilterName);
		expect(serviceMgmtUtil.verifyFilterPanelExpanded(pervasiveInsightsTestData.assignmentQueueFilterName)).toBe(true);
		var filterValue = await serviceMgmtUtil.selectFirstFilterValueBasedOnName(pervasiveInsightsTestData.assignmentQueueFilterName);
		await serviceMgmtUtil.clickOnUpdateFilterButton(pervasiveInsightsTestData.assignmentQueueFilterName);
		await serviceMgmtUtil.clickOnApplyFilterButton();
		await util.waitForInvisibilityOfKibanaDataLoader();
		// Verify tooltip text with applied filter value
		expect(serviceMgmtUtil.getGlobalFilterButtonToolTipText(pervasiveInsightsTestData.assignmentQueueFilterName)).toEqual(filterValue);
		// Apply created date-range filter with "Last 7 days" value
		var last7DaysText = pervasiveInsightsTestData.lastCustomDaysDateRangeText.format(pervasiveInsightsTestData.dateRange7Days);
		await serviceMgmtUtil.clickOnDateRangeFilterButton(pervasiveInsightsTestData.createdFilterName);
		await expect(serviceMgmtUtil.verifyDateRangeFilterPanelExpanded(pervasiveInsightsTestData.createdFilterName)).toBe(true);
		await serviceMgmtUtil.selectDateRangeFilterValue(last7DaysText);
		await serviceMgmtUtil.clickOnApplyFilterButton();
		await util.waitForInvisibilityOfKibanaDataLoader();
		// Verify tooltip text with applied filter value
		await expect(serviceMgmtUtil.getDaysFromDateRangeFilterToolTip(pervasiveInsightsTestData.createdFilterName)).toEqual(pervasiveInsightsTestData.dateRange7Days);
		var totalTicketCountAfter = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.totalTicketCountWidgetName);
		// Remove comma (',') from string and convert to integer
		var totalTicketCountAfterInt = util.stringToInteger(totalTicketCountAfter);
		expect(totalTicketCountAfterInt).toBeLessThan(totalTicketCountBeforeInt);
		await util.clickOnResetFilterLink();
		await util.waitForInvisibilityOfKibanaDataLoader();
		// Verify tooltip text after reset filters
		expect(await serviceMgmtUtil.getGlobalFilterButtonToolTipText(pervasiveInsightsTestData.assignmentQueueFilterName)).toEqual(pervasiveInsightsTestData.noneSelectedTooltipText);
		// Verify date diff for created date range filter after reset filter
		expect(await serviceMgmtUtil.getDateRangeFilterDateDifference(pervasiveInsightsTestData.createdFilterName)).toEqual(pervasiveInsightsTestData.defaultCreatedFilterDateRangeDiff);
		totalTicketCountAfter = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.totalTicketCountWidgetName);
		// Remove comma (',') from string and convert to integer
		totalTicketCountAfterInt = util.stringToInteger(totalTicketCountAfter);
		expect(totalTicketCountBeforeInt).toEqual(totalTicketCountAfterInt);
	});

	it("Total ticket count and priority total in priority view widget should match", async function() {
		serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink);
		// Verify if tab is selected, after clicking on it or not
        expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
		util.switchToFrameById(frames.cssrIFrame);
		util.waitForInvisibilityOfKibanaDataLoader();
		var totalTicketCount = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.totalTicketCountWidgetName);
		// Remove comma (',') from string and convert to integer
		var totalTicketCountInt = util.stringToInteger(totalTicketCount);
		//Getting total priority value
		var totalpriority = await serviceMgmtUtil.getTreemapHoverTooltipValue(pervasiveInsightsTestData.priorityViewWidgetName);
		expect(totalpriority).toEqual(totalTicketCountInt);
	});

	it("Total ticket comparsion with other widgets", async function() {
		// Compare total ticket widget with Capacity vs Non Capacity, OS vs Non OS Drive, Server Region & Auto Ticket + Manual Ticket widget
		serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink);
		// Verify if tab is selected, after clicking on it or not
        expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
		util.switchToFrameById(frames.cssrIFrame);
		await util.waitForInvisibilityOfKibanaDataLoader();
		util.waitForAngular();
		var totalTicketCount = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.totalTicketCountWidgetName);
		// Remove comma (',') from string and convert to integer
		var totalTicketCountInt = util.stringToInteger(totalTicketCount);
		var totalVal1 = await serviceMgmtUtil.getTooltipCountFromDonutChart(pervasiveInsightsTestData.capacityNonCapacityWidgetName);
		since("Total ticket widget vs Capacity Widget validation").expect(totalTicketCountInt).toEqual(totalVal1);
		var totalVal2 = await serviceMgmtUtil.getTooltipCountFromDonutChart(pervasiveInsightsTestData.osNonOsDriveWidgetName);
		since("Total ticket widget vs OS Widget validation").expect(totalTicketCountInt).toEqual(totalVal2);
		var totalVal3 = await serviceMgmtUtil.getTooltipCountFromDonutChart(pervasiveInsightsTestData.serverRegionWidgetName);
		since("Total ticket widget vs server region Widget validation").expect(totalTicketCountInt).toEqual(totalVal3);
		const autoTicketCount = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.autoTicketWidgetName);
		// Remove comma (',') from string and convert to integer
		var autoTicketCountInt = util.stringToInteger(autoTicketCount);
		const userTicketCount = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.userTicketWidgetName);
		// Remove comma (',') from string and convert to integer
		var userTicketCountInt = util.stringToInteger(userTicketCount);
		const totalCount = autoTicketCountInt + userTicketCountInt;
		since("Total ticket widget vs Auto+user Manual Widget validation").expect(totalTicketCountInt).toEqual(totalCount);

	});

	it("Pervasive ticket count should match Incident count for last 30 days", async function(){
		logger.info("-------------Pervasive ticket count vs Incident count----------------")
		serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink);
		// Verify if tab is selected, after clicking on it or not
		expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
		util.switchToFrameById(frames.cssrIFrame);
		await util.waitForInvisibilityOfKibanaDataLoader();
		// Validate the default global filter is applied for "Last 30 days" on Created date-range filter
		expect(serviceMgmtUtil.getDateRangeFilterDateDifference(pervasiveInsightsTestData.createdFilterName)).toEqual(pervasiveInsightsTestData.defaultCreatedFilterDateRangeDiff);
		var totalTicketCount = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.totalTicketCountWidgetName);
		// Remove comma (',') from string and convert to integer
		var totalTicketCountInt = util.stringToInteger(totalTicketCount);
		//Navigate to Incident Managememt page
		launchpadObj.clickOnHamburgerMenu(launchpadTestData.leftNavigationExpanded);
		launchpadObj.clickOnleftNavigationMenuBasedOnName(launchpadTestData.aIOpsIntelligentITOperationsBtn);
		launchpadObj.clickLeftNavCardBasedOnName(launchpadTestData.incidentManagementCard);
		incidentManagementObj.open();
        expect(util.getCurrentURL()).toMatch(appUrls.incidentManagementPageUrl);
		serviceMgmtUtil.clickOnTabLink(incidentManagementTestData.incidentDashboardTabLink);
		// Verify if incident tab is selected, after clicking on it or not
        expect(serviceMgmtUtil.isTabLinkSelected(incidentManagementTestData.incidentDashboardTabLink)).toBe(true);
		util.switchToFrameById(frames.cssrIFrame);
		await util.waitForInvisibilityOfKibanaDataLoader();
		// Apply created date-range filter with "Last 30 days" value
		await serviceMgmtUtil.clickOnDateRangeFilterButton(incidentManagementTestData.createdFilterName);
		await expect(serviceMgmtUtil.verifyDateRangeFilterPanelExpanded(incidentManagementTestData.createdFilterName)).toBe(true);
		await serviceMgmtUtil.selectDateRangeFilterValue(incidentManagementTestData.dateRangeFilterLast30Days);
		await serviceMgmtUtil.clickOnApplyFilterButton();
		await util.waitForInvisibilityOfKibanaDataLoader();
		// Verify tooltip text with applied filter value
		await expect(serviceMgmtUtil.getDaysFromDateRangeFilterToolTip(incidentManagementTestData.createdFilterName)).toEqual(incidentManagementTestData.dateRangeFilter30DaysDiff);
		// Verify the incoming vol after the "Last 30 days" filter is applied
		var incomingVolFromIncidentDashboard = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(incidentManagementTestData.incomingVolWidgetName);
		var incomingVolInt = util.stringToInteger(incomingVolFromIncidentDashboard);
		//Compare ticket count in pervasive with incident ticket count for last 30 days
		expect(totalTicketCountInt).toEqual(incomingVolInt)
	});

	if (browser.params.dataValiadtion) {
		it("Data validation for 'Top 50 Servers' name filter widget on Pervasive Issue Analysis tab", async function(){
			logger.info("------Data validation------");
			await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink);
			// Verify if tab is selected, after clicking on it or not
			await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
			util.switchToFrameById(frames.cssrIFrame);
			util.waitForInvisibilityOfKibanaDataLoader();
			// Data extraction
			var top5ServersFromDashboardKeys = util.getJSONObjectKeys(pervasiveInsightsTop5AffectedServers);
			var ticketCountFromTop50ServersWidget = util.getJSONObjectValues(pervasiveIssueAnalysis_expectedData.top_50_servers);
			for(var i = 0; i < top5ServersFromDashboardKeys.length; i++){
				await serviceMgmtUtil.clickOnSectionInNameListsFilters(pervasiveInsightsTestData.top50ServersWidgetName,top5ServersFromDashboardKeys[i]);
				await util.waitForInvisibilityOfKibanaDataLoader();
				var totalTicketCount = util.stringToInteger(await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.totalTicketCountWidgetName));
				await expect(totalTicketCount).toEqual(ticketCountFromTop50ServersWidget[i]);
				util.clickOnResetFilterLink();
				await util.waitForInvisibilityOfKibanaDataLoader();
			}
		});
	}
	if (browser.params.dataValiadtion) {
		it("Data validation for 'Month Wise Trend' Vertical Bar chart widget on Pervasive Issue Analysis tab", async function(){
			logger.info("------Data validation------");
			await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink);
			// Verify if tab is selected, after clicking on it or not
			await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
			util.switchToFrameById(frames.cssrIFrame);
			util.waitForInvisibilityOfKibanaDataLoader();
			var xAxisLabels = util.getJSONObjectKeys(pervasiveIssueAnalysis_expectedData.month_wise_trend);
			var countValues = util.getJSONObjectValues(pervasiveIssueAnalysis_expectedData.month_wise_trend);
			for(var i=0; i<xAxisLabels.length; i++){
				expect(await serviceMgmtUtil.getCountFromVerticalBarChart(pervasiveInsightsTestData.monthWiseTrendWidgetName, xAxisLabels[i])).toEqual(countValues[i]);
			}
		});
	}

	if (browser.params.dataValiadtion) {
		it("Data validation for 'Week Wise Trend' Wave point graph widget on Pervasive Issue Analysis tab", async function(){
			logger.info("------Data validation------");
			await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink);
			// Verify if tab is selected, after clicking on it or not
			await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
			util.switchToFrameById(frames.cssrIFrame);
			util.waitForInvisibilityOfKibanaDataLoader();
			var xAxisLabels = util.getJSONObjectKeys(pervasiveIssueAnalysis_expectedData.week_wise_trend);
			var countValues = util.getJSONObjectValues(pervasiveIssueAnalysis_expectedData.week_wise_trend);
			for(var i=0; i<xAxisLabels.length; i++){
				expect(await serviceMgmtUtil.getCountFromWaveGraphPoints(pervasiveInsightsTestData.weekWiseTrendWidgetName, xAxisLabels[i])).toEqual(countValues[i]);
			}
		});
	}

	if (browser.params.dataValiadtion) {
		it("Data validation for 'Server Function' box filter widget on Pervasive Issue Analysis tab", async function(){
			logger.info("------Data validation------");
			await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink);
			// Verify if tab is selected, after clicking on it or not
			await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
			util.switchToFrameById(frames.cssrIFrame);
			await util.waitForInvisibilityOfKibanaDataLoader();
			// Get json object for a widget
			var jsonObjForServerFunctionWidget = pervasiveIssueAnalysis_expectedData.server_function;
			expect(await serviceMgmtUtil.verifyValuesFromJSONAndUIForBoxFilters(pervasiveInsightsTestData.serverFunctionWidgetDataTitleName,jsonObjForServerFunctionWidget)).toBe(true);
		});
	}

	if (browser.params.dataValiadtion) {
		it("Data validation for 'OpCo' box filter widget on Pervasive Issue Analysis tab", async function(){
			logger.info("------Data validation------");
			await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink);
			// Verify if tab is selected, after clicking on it or not
			await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
			util.switchToFrameById(frames.cssrIFrame);
			await util.waitForInvisibilityOfKibanaDataLoader();
			// Get json object for a widget
			var jsonObjForOpcoWidget = pervasiveIssueAnalysis_expectedData.opco;
			expect(await serviceMgmtUtil.verifyValuesFromJSONAndUIForBoxFilters(pervasiveInsightsTestData.opcoWidgetNameDataTitleName,jsonObjForOpcoWidget)).toBe(true);
		});
	}

	if (browser.params.dataValiadtion) {
		it("Data validation for 'Top 50 Category' box filter widget on Pervasive Issue Analysis tab", async function(){
			logger.info("------Data validation------");
			await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink);
			// Verify if tab is selected, after clicking on it or not
			await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
			util.switchToFrameById(frames.cssrIFrame);
			await util.waitForInvisibilityOfKibanaDataLoader();
			// Get json object for a widget
			var jsonObjForTop50CategoryWidget = pervasiveIssueAnalysis_expectedData.top_50_category;
			expect(await serviceMgmtUtil.verifyValuesFromJSONAndUIForBoxFilters(pervasiveInsightsTestData.top50CategoryWidgetNameDataTitleName,jsonObjForTop50CategoryWidget)).toBe(true);
		});
	}

	if (browser.params.dataValiadtion) {
		it("Data validation for 'Assignment Box' box filter widget on Pervasive Issue Analysis tab", async function(){
			logger.info("------Data validation------");
			await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink);
			// Verify if tab is selected, after clicking on it or not
			await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
			util.switchToFrameById(frames.cssrIFrame);
			await util.waitForInvisibilityOfKibanaDataLoader();
			// Get json object for a widget
			var jsonObjForAssignmentGroupWidget = pervasiveIssueAnalysis_expectedData.assignment_group;
			expect(await serviceMgmtUtil.verifyValuesFromJSONAndUIForBoxFilters(pervasiveInsightsTestData.assignmentGroupWidgetNameDataTitleName,jsonObjForAssignmentGroupWidget)).toBe(true);
		});
	}

	if (browser.params.dataValiadtion) {
		it("Data validation for 'Top Servers On Issues' heat map filter widget on Pervasive Issue Analysis tab", async function(){
			logger.info("------Data validation------");
			await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink);
			// Verify if tab is selected, after clicking on it or not
			await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
			util.switchToFrameById(frames.cssrIFrame);``
			await util.waitForInvisibilityOfKibanaDataLoader();
			// Get json object for a widget
			var jsonObjForTopServersOnIssuesWidget = pervasiveIssueAnalysis_expectedData.top_servers_on_issues;
			expect(await serviceMgmtUtil.verifyValuesFromJSONAndUIForHeatMapWidget(pervasiveInsightsTestData.topServersOnIssuesWidgetName, jsonObjForTopServersOnIssuesWidget)).toBe(true);
		});
	}
	
	if (browser.params.dataValiadtion) {
		it("Data validation for 'Top Issues On Servers' heat map filter widget on Pervasive Issue Analysis tab", async function(){
			logger.info("------Data validation------");
			await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink);
			// Verify if tab is selected, after clicking on it or not
			await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
			util.switchToFrameById(frames.cssrIFrame);``
			await util.waitForInvisibilityOfKibanaDataLoader();
			// Get json object for a widget
			var jsonObjForTopIssuesOnServersWidget = pervasiveIssueAnalysis_expectedData.top_issues_on_servers;
			expect(await serviceMgmtUtil.verifyValuesFromJSONAndUIForHeatMapWidget(pervasiveInsightsTestData.topIssuesOnServersWidgetName, jsonObjForTopIssuesOnServersWidget)).toBe(true);
		});
	}

	if (browser.params.dataValiadtion) {
		it("Data validation for 'Pervasive What Time and Day Alert Triggered' heat map filter widget on Pervasive Issue Analysis tab", async function(){
			logger.info("------Data validation------");
			await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink);
			// Verify if tab is selected, after clicking on it or not
			await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
			util.switchToFrameById(frames.cssrIFrame);``
			await util.waitForInvisibilityOfKibanaDataLoader();
			// Get widget JSON Object
			var jsonObjForWhatTimeAndDayAlertTriggeredWidget = pervasiveIssueAnalysis_expectedData.what_time_and_day_alert_triggered;
			expect(await serviceMgmtUtil.verifyValuesFromJSONAndUIForHeatMapWidget(pervasiveInsightsTestData.whatTimeDayAlertTriggeredWidgetNameDataTitleName, jsonObjForWhatTimeAndDayAlertTriggeredWidget)).toBe(true);
		});
	}

	if (browser.params.dataValiadtion) {
		it("Data validation for 'Building ID View' box filter widget on Topography tab", async function(){
			logger.info("------Data validation------");
			await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.topographyTabLink);
			// Verify if tab is selected, after clicking on it or not
			await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.topographyTabLink)).toBe(true);
			util.switchToFrameById(frames.cssrIFrame);
			await util.waitForInvisibilityOfKibanaDataLoader();
			// Get json object for a widget
			var jsonObjForBuildIdViewWidget = topography_expectedData.building_id_view;
			expect(await serviceMgmtUtil.verifyValuesFromJSONAndUIForBoxFilters(pervasiveInsightsTestData.buildingIDViewWidgetNameDataTitleName,jsonObjForBuildIdViewWidget)).toBe(true);
		});
	}

	if (browser.params.dataValiadtion) {
		it("Data validation for 'Street Address View' box filter widget on Topography tab", async function(){
			logger.info("------Data validation------");
			await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.topographyTabLink);
			// Verify if tab is selected, after clicking on it or not
			await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.topographyTabLink)).toBe(true);
			util.switchToFrameById(frames.cssrIFrame);
			await util.waitForInvisibilityOfKibanaDataLoader();
			// Get json object for a widget
			var jsonObjForStreetAddrViewWidget = topography_expectedData.street_address_view;
			expect(await serviceMgmtUtil.verifyValuesFromJSONAndUIForBoxFilters(pervasiveInsightsTestData.streetAddrViewWidgetName,jsonObjForStreetAddrViewWidget)).toBe(true);
		});
	}

	if (browser.params.dataValiadtion) {
		it("Data validation for 'Site ID View' box filter widget on Topography tab", async function(){
			logger.info("------Data validation------");
			await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.topographyTabLink);
			// Verify if tab is selected, after clicking on it or not
			await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.topographyTabLink)).toBe(true);
			util.switchToFrameById(frames.cssrIFrame);
			await util.waitForInvisibilityOfKibanaDataLoader();
			// Get json object for a widget
			var jsonObjForSiteIdViewWidget = topography_expectedData.site_id_view;
			expect(await serviceMgmtUtil.verifyValuesFromJSONAndUIForBoxFilters(pervasiveInsightsTestData.siteIDViewWidgetNameDataTitleName,jsonObjForSiteIdViewWidget)).toBe(true);
		});
	}

	if (browser.params.dataValiadtion) {
		it("Data validation for 'Category View For Top 10 Address' heat map filter widget on Topography tab", async function(){
			logger.info("------Data validation------");
			await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.topographyTabLink);
			// Verify if tab is selected, after clicking on it or not
			await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.topographyTabLink)).toBe(true);
			util.switchToFrameById(frames.cssrIFrame);
			await util.waitForInvisibilityOfKibanaDataLoader();
			// Get widget JSON Object
			var jsonObjForCategoryViewForTop10AddrWidget = topography_expectedData.category_view_for_top_10_address;
			expect(await serviceMgmtUtil.verifyValuesFromJSONAndUIForHeatMapWidget(pervasiveInsightsTestData.categoryViewForTop10AddrWidgetNameDataTitleName, jsonObjForCategoryViewForTop10AddrWidget)).toBe(true);
		});
	}

	it("Data validation for Number cards for ticket count on Pervasive dashboard tab", async function(){
		logger.info("------Number cards : ES Data validation------");
		// Verify if tab is selected, after clicking on it or not
		expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
		util.switchToFrameById(frames.cssrIFrame);
		await util.waitForInvisibilityOfKibanaDataLoader();
		var totalTicketCountFromPervasiveDashboard = util.stringToInteger(await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.totalTicketCountWidgetName));
		var serverCountFromPervasiveDashboard = util.stringToInteger(await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.serverCountWidgetName));
		var mttrInclCountFromPervasiveDashboard = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.mttrIncHoldWidegetName);
		var mttrExclCountFromPervasiveDashboard = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.mttrExcHoldWidgetName);
		var autoTicketCountFromPervasiveDashboard = util.stringToInteger(await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.autoTicketWidgetName));
		var userTicketCountFromPervasiveDashboard = util.stringToInteger(await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.userTicketWidgetName));

		if(isEnabledESValidation) {
			var totalTktCntFromES = await esQueriesPervasive.totalTickets(pervasiveInsightsTestData.esPervasiveIndex,tenantId);
			var serverCntFromES = await esQueriesPervasive.serverCount(pervasiveInsightsTestData.esPervasiveIndex,tenantId);
			var mttrInclCntFromES = await esQueriesPervasive.mttrInclCount(pervasiveInsightsTestData.esPervasiveIndex,tenantId);
			var mttrExclCntFromES = await esQueriesPervasive.mttrExclCount(pervasiveInsightsTestData.esPervasiveIndex,tenantId);
			var autoTicketCntFromES = await esQueriesPervasive.autoTicketCount(pervasiveInsightsTestData.esPervasiveIndex,tenantId);
			var userTicketCntFromES = await esQueriesPervasive.userTicketCount(pervasiveInsightsTestData.esPervasiveIndex,tenantId);
			expect(totalTicketCountFromPervasiveDashboard).toEqual(totalTktCntFromES);
			expect(serverCountFromPervasiveDashboard).toEqual(serverCntFromES);
			expect(mttrInclCountFromPervasiveDashboard).toEqual(mttrInclCntFromES);
			expect(mttrExclCountFromPervasiveDashboard).toEqual(mttrExclCntFromES);
			expect(autoTicketCountFromPervasiveDashboard).toEqual(autoTicketCntFromES);
			expect(userTicketCountFromPervasiveDashboard).toEqual(userTicketCntFromES);
		}
		// Navigate to Topography tab
		util.switchToDefault();
		util.switchToFrameById(frames.mcmpIframe);
		await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.topographyTabLink);
		// Verify if tab is selected, after clicking on it or not
		await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.topographyTabLink)).toBe(true);
		util.switchToFrameById(frames.cssrIFrame);
		await util.waitForInvisibilityOfKibanaDataLoader();
		var serverCountFromTopography = util.stringToInteger(await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.serverCountWidgetName));
		var mttrInclCounFromTopography = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.mttrIncHoldWidegetName);
		var mttrExclCountFromTopography = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.mttrExcHoldWidgetName);
		expect(serverCountFromPervasiveDashboard).toEqual(serverCountFromTopography);
		expect(mttrInclCountFromPervasiveDashboard).toEqual(mttrInclCounFromTopography);
		expect(mttrExclCountFromPervasiveDashboard).toEqual(mttrExclCountFromTopography);
	});

	if(isEnabledESValidation) {
		it("Data validation for 'Top 50 servers' on Pervasive dashboard tab", async function(){
			logger.info("------ Top 50 servers on Pervasive dashboard tab : ES Data validation------");
			let flag = true;
			// Verify if tab is selected, after clicking on it or not
			expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
			util.switchToFrameById(frames.cssrIFrame);
			await util.waitForInvisibilityOfKibanaDataLoader();
			util.waitForAngular();
			var tagListUI = await serviceMgmtUtil.getKabianaBoardCardCloudTagListBasedOnName(pervasiveInsightsTestData.top50ServersWidgetName);
			var cloudtagListFromES = await esQueriesPervasive.Top50Servers(pervasiveInsightsTestData.esPervasiveIndex,tenantId);
			expect(true).toEqual(pervasiveInsightsObj.getCloudTagListStatus(tagListUI,cloudtagListFromES));
		});

		it("Data validation for 'Server function' on Pervasive dashboard tab", async function(){
			logger.info("------ server function on Pervasive dashboard tab : ES Data validation------");
			// Verify if tab is selected, after clicking on it or not
			expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
			util.switchToFrameById(frames.cssrIFrame);
			await util.waitForInvisibilityOfKibanaDataLoader();
			util.waitForAngular();
			var serverFunObjFromES = await esQueriesPervasive.serverFunction(pervasiveInsightsTestData.esPervasiveIndex,tenantId);
			expect(await serviceMgmtUtil.verifyValuesFromJSONAndUIForBoxFilters(pervasiveInsightsTestData.serverFunctionWidgetDataTitleName,serverFunObjFromES)).toBe(true);
		});

		it("Data validation for 'OpCo' on Pervasive dashboard tab", async function(){
			logger.info("------ OpCo on Pervasive dashboard tab : ES Data validation------");
			// Verify if tab is selected, after clicking on it or not
			expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
			util.switchToFrameById(frames.cssrIFrame);
			await util.waitForInvisibilityOfKibanaDataLoader();
			util.waitForAngular();
			var opcoObjFromES = await esQueriesPervasive.OpCo(pervasiveInsightsTestData.esPervasiveIndex,tenantId);
			expect(await serviceMgmtUtil.verifyValuesFromJSONAndUIForBoxFilters(pervasiveInsightsTestData.opcoWidgetNameDataTitleName,opcoObjFromES)).toBe(true);
		});

		it("Data validation for 'Top 50 category' on Pervasive dashboard tab", async function(){
			logger.info("------ Top 50 category on Pervasive dashboard tab :ES Data validation------");
			// Verify if tab is selected, after clicking on it or not
			expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
			util.switchToFrameById(frames.cssrIFrame);
			await util.waitForInvisibilityOfKibanaDataLoader();
			util.waitForAngular();
			var top50CatObjFromES = await esQueriesPervasive.top50Category(pervasiveInsightsTestData.esPervasiveIndex,tenantId);
			expect(await serviceMgmtUtil.verifyValuesFromJSONAndUIForBoxFilters(pervasiveInsightsTestData.top50CategoryWidgetNameDataTitleName,top50CatObjFromES)).toBe(true);
		});

		it("Data validation for 'Assignment Group' on Pervasive dashboard tab", async function(){
			logger.info("------ Assignment Group on Pervasive dashboard tab : ES Data validation------");
			// Verify if tab is selected, after clicking on it or not
			expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
			util.switchToFrameById(frames.cssrIFrame);
			await util.waitForInvisibilityOfKibanaDataLoader();
			util.waitForAngular();
			var assgnGrpObjFromES = await esQueriesPervasive.assignmentGroup(pervasiveInsightsTestData.esPervasiveIndex,tenantId);
			expect(await serviceMgmtUtil.verifyValuesFromJSONAndUIForBoxFilters(pervasiveInsightsTestData.assignmentGroupWidgetNameDataTitleName,assgnGrpObjFromES)).toBe(true);
		});

		it("Data validation for 'Month Wise Trend' Vertical Bar chart widget on Pervasive Issue Analysis tab", async function(){
			logger.info("------Month Wise Trend :ES Data validation------");
			await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink);
			// Verify if tab is selected, after clicking on it or not
			await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
			util.switchToFrameById(frames.cssrIFrame);
			await util.waitForInvisibilityOfKibanaDataLoader();
			var mnthWiseObjFromES = await esQueriesPervasive.monthWiseTrend(pervasiveInsightsTestData.esPervasiveIndex,tenantId);
			var xAxisLabels = util.getJSONObjectKeys(mnthWiseObjFromES);
			var countValues = util.getJSONObjectValues(mnthWiseObjFromES);
			for(var i=0; i<xAxisLabels.length; i++){
				expect(await serviceMgmtUtil.getCountFromVerticalBarChart(pervasiveInsightsTestData.monthWiseTrendWidgetName, xAxisLabels[i])).toEqual(countValues[i]);
			}
		});

		it("Data validation for 'Week Wise Trend' Wave point graph widget on Pervasive Issue Analysis tab", async function(){
			logger.info("------Week Wise Trend : ES Data validation------");
			await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink);
			// Verify if tab is selected, after clicking on it or not
			await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
			util.switchToFrameById(frames.cssrIFrame);
			await util.waitForInvisibilityOfKibanaDataLoader();
			var xAxisLabels = await serviceMgmtUtil.getXAxisLabelsFromWaveGraph(pervasiveInsightsTestData.weekWiseTrendWidgetName);
			var weekWiseTrendObjFromES = await esQueriesPervasive.weekWiseTrend(pervasiveInsightsTestData.esPervasiveIndex,tenantId,xAxisLabels);
			expect(await serviceMgmtUtil.verifyCountListWaveGraphPointsFromUIAndESQuery(pervasiveInsightsTestData.weekWiseTrendWidgetName,weekWiseTrendObjFromES)).toBe(true);
		});

		it("Data validation for 'Pervasive What Time and Day Alert Triggered' heat map filter widget on Pervasive Issue Analysis tab", async function(){
			logger.info("------Pervasive What Time and Day Alert Triggered :ES Data validation------");
			await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink);
			// Verify if tab is selected, after clicking on it or not
			await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.pervasiveIssueAnalysisTabLink)).toBe(true);
			util.switchToFrameById(frames.cssrIFrame);
			await util.waitForInvisibilityOfKibanaDataLoader();
			// Get widget JSON Object from ES
			var WhatTimeAndDayAlertTriggerObjFromES = await esQueriesPervasive.timeAndDayAlertTriggered(pervasiveInsightsTestData.esPervasiveIndex,tenantId);
			expect(await serviceMgmtUtil.verifyValuesFromJSONAndUIForHeatMapWidget(pervasiveInsightsTestData.whatTimeDayAlertTriggeredWidgetNameDataTitleName, WhatTimeAndDayAlertTriggerObjFromES)).toBe(true);
		});
		
		it("Data validation for 'Top Category View' name map filter widget on Topography tab", async function(){
			logger.info("------Top Category View : ES Data validation------");
			await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.topographyTabLink);
			// Verify if tab is selected, after clicking on it or not
			await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.topographyTabLink)).toBe(true);
			util.switchToFrameById(frames.cssrIFrame);
			await util.waitForInvisibilityOfKibanaDataLoader();
			var topCategoryViewFromWidget = await serviceMgmtUtil.getNamesFromWordCloud(pervasiveInsightsTestData.topCategoryViewWidgetName);
			var filteredTopCategoryViewFromWidget = await util.removeEmptyNullValuesFromList(topCategoryViewFromWidget);
			var topCategoryViewFromES =  await esQueriesPervasive.getTopCategoryView(pervasiveInsightsTestData.esPervasiveIndex, tenantId, 30);
			expect(serviceMgmtUtil.getAllValuesofWordCloudGraph(filteredTopCategoryViewFromWidget,topCategoryViewFromES)).not.toContain("Not-matching");
		});

		it("Data validation for 'Category View from Top 10 Address' heat map filter widget on Topography tab", async function(){
			logger.info("------Category View from Top 10 Address : ES Data validation------");
			await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.topographyTabLink);
			// Verify if tab is selected, after clicking on it or not
			await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.topographyTabLink)).toBe(true);
			util.switchToFrameById(frames.cssrIFrame);
			await util.waitForInvisibilityOfKibanaDataLoader();
			var yAxisLabels = await serviceMgmtUtil.getYAxisLabelsListForHeatMapFilter(pervasiveInsightsTestData.categoryViewForTop10AddrWidgetNameDataTitleName);
			var ListOfCountListFromES = await esQueriesPervasive.getCategoryViewForTop10Address(pervasiveInsightsTestData.esPervasiveIndex,tenantId,yAxisLabels);
			var ListOfCountListFromUI = await serviceMgmtUtil.getListOfCountListUsingNameMapWidgetFromHeatMapWidget(pervasiveInsightsTestData.categoryViewForTop10AddrWidgetNameDataTitleName,pervasiveInsightsTestData.topCategoryViewWidgetName,yAxisLabels);
			// Verify the list of list of count values for each row filter from UI with the list of list of count values from ES query response
			expect(util.compareNestedArrays(ListOfCountListFromES, ListOfCountListFromUI)).toBe(true);
		});

		it("Validate data Present in 'Site ID Count,Street Address Count, Country View Count' on 'Topography' Tab against elastic", async function(){
			logger.info("-----------Site ID Count,Street Address Count, Country View Count: ES Data Validation------------")
			await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.topographyTabLink);
			// Verify if tab is selected, after clicking on it or not
			await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.topographyTabLink)).toBe(true);
			util.switchToFrameById(frames.cssrIFrame);
			util.waitForInvisibilityOfKibanaDataLoader();
			// Check all widgets on Kibana report are Present
			await expect(serviceMgmtUtil.verifyWidgetNamesPresentOnKibanaReport(topographyTabWidgetNameList)).toBe(true);
			var siteIDCount = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.siteIDCountWidgetName);
			var streetAddrCount = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.streetAddrCountWidgetName);
			var countryViewCount = await serviceMgmtUtil.getKabianaBoardCardTextBasedOnName(pervasiveInsightsTestData.countryViewCountWidgetName);
			// Remove comma (',') from string and convert to integer
			var siteIDCountInt = util.stringToInteger(siteIDCount);
			var streetAddrCountInt = util.stringToInteger(streetAddrCount);
			var countryViewCountInt = util.stringToInteger(countryViewCount);
			logger.info("------ES validation------");
			var siteIDCountFromES = await esQueriesPervasive.siteIDCount(pervasiveInsightsTestData.esPervasiveIndex,tenantId);
	        expect(siteIDCountInt).toEqual(siteIDCountFromES);
			var streetAddrCountFromES = await esQueriesPervasive.streetAddrCount(pervasiveInsightsTestData.esPervasiveIndex,tenantId);
			expect(streetAddrCountInt).toEqual(streetAddrCountFromES);
			var countryViewCountFromES = await esQueriesPervasive.countryViewCount(pervasiveInsightsTestData.esPervasiveIndex,tenantId);
			expect(countryViewCountInt).toEqual(countryViewCountFromES);
		});

		it("Elastic validation for BuildingID View on Pervasive topography tab", async function(){
			logger.info("-------BuildingID View: ES Data Validation--------")
			await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.topographyTabLink);
			// Verify if tab is selected, after clicking on it or not
		    await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.topographyTabLink)).toBe(true);
			util.switchToFrameById(frames.cssrIFrame);
			util.waitForInvisibilityOfKibanaDataLoader();
			// Check all widgets on Kibana report are Present
			await expect(serviceMgmtUtil.verifyWidgetNamesPresentOnKibanaReport(topographyTabWidgetNameList)).toBe(true);
			var buildingIDViewObjFromES = await esQueriesPervasive.buildingIDView(pervasiveInsightsTestData.esPervasiveIndex,tenantId);
			logger.info("------ES Data validation------");
			expect(await serviceMgmtUtil.verifyValuesFromJSONAndUIForBoxFilters(pervasiveInsightsTestData.buildingIDViewWidgetNameDataTitleName,buildingIDViewObjFromES)).toBe(true);
		});

		it("Elastic validation for StreetAddress View on Pervasive topography tab", async function(){
			logger.info("-------StreetAddress View: ES Data Validation-------")
			await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.topographyTabLink);
			// Verify if tab is selected, after clicking on it or not
		    await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.topographyTabLink)).toBe(true);
			util.switchToFrameById(frames.cssrIFrame);
			util.waitForInvisibilityOfKibanaDataLoader();
			// Check all widgets on Kibana report are Present
			await expect(serviceMgmtUtil.verifyWidgetNamesPresentOnKibanaReport(topographyTabWidgetNameList)).toBe(true);
			var streetAddrViewObjFromES = await esQueriesPervasive.streetAddrView(pervasiveInsightsTestData.esPervasiveIndex,tenantId);
			logger.info("------ES Data validation------");
			expect(await serviceMgmtUtil.verifyValuesFromJSONAndUIForBoxFilters(pervasiveInsightsTestData.streetAddrViewWidgetName,streetAddrViewObjFromES)).toBe(true);
		});

		it("Elastic validation for siteID View on Pervasive topography tab", async function(){
			logger.info("-----------siteID View: ES Data Validation---------")
			await serviceMgmtUtil.clickOnTabLink(pervasiveInsightsTestData.topographyTabLink);
			// Verify if tab is selected, after clicking on it or not
		    await expect(serviceMgmtUtil.isTabLinkSelected(pervasiveInsightsTestData.topographyTabLink)).toBe(true);
			util.switchToFrameById(frames.cssrIFrame);
			util.waitForInvisibilityOfKibanaDataLoader();
			// Check all widgets on Kibana report are Present
			await expect(serviceMgmtUtil.verifyWidgetNamesPresentOnKibanaReport(topographyTabWidgetNameList)).toBe(true);
			var siteIDViewObjFromES = await esQueriesPervasive.siteIDView(pervasiveInsightsTestData.esPervasiveIndex,tenantId);
			logger.info("------ES Data validation------");
			expect(await serviceMgmtUtil.verifyValuesFromJSONAndUIForBoxFilters(pervasiveInsightsTestData.siteIDViewWidgetNameDataTitleName,siteIDViewObjFromES)).toBe(true);
		});


	}

	afterAll(async function() {
		await launchpadObj.clickOnLogoutAndLogin(browser.params.username, browser.params.password);
	});
});
